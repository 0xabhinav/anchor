{"version":3,"file":"index.js","sources":["../../../anchor/dist/browser/index.js","../../../src/coder/accounts.ts","../../../src/coder/events.ts","../../../src/coder/instructions.ts","../../../src/coder/state.ts","../../../src/coder/types.ts","../../../src/coder/index.ts","../../../src/program.ts"],"sourcesContent":["import { Buffer as Buffer$1 } from 'buffer';\nimport { PublicKey, Transaction, TransactionInstruction, SendTransactionError, NONCE_ACCOUNT_LENGTH, SystemProgram, SYSVAR_RENT_PUBKEY, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport * as web3_js from '@solana/web3.js';\nexport { web3_js as web3 };\nimport BN from 'bn.js';\nexport { default as BN } from 'bn.js';\nimport bs58$1 from 'bs58';\nimport camelCase from 'camelcase';\nimport * as borsh from '@coral-xyz/borsh';\nimport { sha256 as sha256$1 } from '@noble/hashes/sha256';\nimport { inflate } from 'pako';\nimport EventEmitter from 'eventemitter3';\n\n/**\n * Splits an array into chunks\n *\n * @param array Array of objects to chunk.\n * @param size The max size of a chunk.\n * @returns A two dimensional array where each T[] length is < the provided size.\n */\nfunction chunks(array, size) {\n    return Array.apply(0, new Array(Math.ceil(array.length / size))).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n/**\n * Check if a transaction object is a VersionedTransaction or not\n *\n * @param tx\n * @returns bool\n */\nconst isVersionedTransaction = (tx) => {\n    return \"version\" in tx;\n};\n\nfunction encode$3(data) {\n    return data.reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"0x\");\n}\nfunction decode$3(data) {\n    if (data.indexOf(\"0x\") === 0) {\n        data = data.substr(2);\n    }\n    if (data.length % 2 === 1) {\n        data = \"0\" + data;\n    }\n    let key = data.match(/.{2}/g);\n    if (key === null) {\n        return Buffer$1.from([]);\n    }\n    return Buffer$1.from(key.map((byte) => parseInt(byte, 16)));\n}\n\nvar hex = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    encode: encode$3,\n    decode: decode$3\n});\n\nfunction decode$2(array) {\n    const decoder = new TextDecoder(\"utf-8\") // Browser https://caniuse.com/textencoder.\n        ; // Node.\n    return decoder.decode(array);\n}\nfunction encode$2(input) {\n    const encoder = new TextEncoder() // Browser.\n        ; // Node.\n    return encoder.encode(input);\n}\n\nvar utf8 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    decode: decode$2,\n    encode: encode$2\n});\n\nfunction encode$1(data) {\n    return bs58$1.encode(data);\n}\nfunction decode$1(data) {\n    return bs58$1.decode(data);\n}\n\nvar bs58 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    encode: encode$1,\n    decode: decode$1\n});\n\nfunction encode(data) {\n    return data.toString(\"base64\");\n}\nfunction decode(data) {\n    return Buffer$1.from(data, \"base64\");\n}\n\nvar base64 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    encode: encode,\n    decode: decode\n});\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    hex: hex,\n    utf8: utf8,\n    bs58: bs58,\n    base64: base64\n});\n\nfunction parseIdlErrors(idl) {\n    const errors = new Map();\n    if (idl.errors) {\n        idl.errors.forEach((e) => {\n            var _a;\n            let msg = (_a = e.msg) !== null && _a !== void 0 ? _a : e.name;\n            errors.set(e.code, msg);\n        });\n    }\n    return errors;\n}\n// Allow either IdLInstruction or IdlStateMethod since the types share fields.\nfunction toInstruction(idlIx, ...args) {\n    if (idlIx.args.length != args.length) {\n        throw new Error(\"Invalid argument length\");\n    }\n    const ix = {};\n    let idx = 0;\n    idlIx.args.forEach((ixArg) => {\n        ix[ixArg.name] = args[idx];\n        idx += 1;\n    });\n    return ix;\n}\n// Throws error if any account required for the `ix` is not given.\nfunction validateAccounts(ixAccounts, accounts = {}) {\n    ixAccounts.forEach((acc) => {\n        if (\"accounts\" in acc) {\n            validateAccounts(acc.accounts, accounts[acc.name]);\n        }\n        else {\n            if (accounts[acc.name] === undefined) {\n                throw new Error(`Invalid arguments: ${acc.name} not provided.`);\n            }\n        }\n    });\n}\n// Translates an address to a Pubkey.\nfunction translateAddress(address) {\n    return address instanceof PublicKey ? address : new PublicKey(address);\n}\n\n/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\nclass StructError extends TypeError {\n  constructor(failure, failures) {\n    let cached;\n    const {\n      message,\n      ...rest\n    } = failure;\n    const {\n      path\n    } = failure;\n    const msg = path.length === 0 ? message : \"At path: \" + path.join('.') + \" -- \" + message;\n    super(msg);\n    this.value = void 0;\n    this.key = void 0;\n    this.type = void 0;\n    this.refinement = void 0;\n    this.path = void 0;\n    this.branch = void 0;\n    this.failures = void 0;\n    Object.assign(this, rest);\n    this.name = this.constructor.name;\n\n    this.failures = () => {\n      var _cached;\n\n      return (_cached = cached) != null ? _cached : cached = [failure, ...failures()];\n    };\n  }\n\n}\n\n/**\n * Check if a value is an iterator.\n */\nfunction isIterable(x) {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function';\n}\n/**\n * Check if a value is a plain object.\n */\n\n\nfunction isObject(x) {\n  return typeof x === 'object' && x != null;\n}\n/**\n * Return a value as a printable string.\n */\n\nfunction print(value) {\n  return typeof value === 'string' ? JSON.stringify(value) : \"\" + value;\n}\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nfunction shiftIterator(input) {\n  const {\n    done,\n    value\n  } = input.next();\n  return done ? undefined : value;\n}\n/**\n * Convert a single validation result to a failure.\n */\n\nfunction toFailure(result, context, struct, value) {\n  if (result === true) {\n    return;\n  } else if (result === false) {\n    result = {};\n  } else if (typeof result === 'string') {\n    result = {\n      message: result\n    };\n  }\n\n  const {\n    path,\n    branch\n  } = context;\n  const {\n    type\n  } = struct;\n  const {\n    refinement,\n    message = \"Expected a value of type `\" + type + \"`\" + (refinement ? \" with refinement `\" + refinement + \"`\" : '') + \", but received: `\" + print(value) + \"`\"\n  } = result;\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message\n  };\n}\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nfunction* toFailures(result, context, struct, value) {\n  if (!isIterable(result)) {\n    result = [result];\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value);\n\n    if (failure) {\n      yield failure;\n    }\n  }\n}\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nfunction* run(value, struct, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  const {\n    path = [],\n    branch = [value],\n    coerce = false,\n    mask = false\n  } = options;\n  const ctx = {\n    path,\n    branch\n  };\n\n  if (coerce) {\n    value = struct.coercer(value, ctx);\n\n    if (mask && struct.type !== 'type' && isObject(struct.schema) && isObject(value) && !Array.isArray(value)) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key];\n        }\n      }\n    }\n  }\n\n  let valid = true;\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false;\n    yield [failure, undefined];\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask\n    });\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false;\n        yield [t[0], undefined];\n      } else if (coerce) {\n        v = t[1];\n\n        if (k === undefined) {\n          value = v;\n        } else if (value instanceof Map) {\n          value.set(k, v);\n        } else if (value instanceof Set) {\n          value.add(v);\n        } else if (isObject(value)) {\n          value[k] = v;\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value, ctx)) {\n      valid = false;\n      yield [failure, undefined];\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value];\n  }\n}\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nclass Struct {\n  constructor(props) {\n    this.TYPE = void 0;\n    this.type = void 0;\n    this.schema = void 0;\n    this.coercer = void 0;\n    this.validator = void 0;\n    this.refiner = void 0;\n    this.entries = void 0;\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = value => value,\n      entries = function* () {}\n    } = props;\n    this.type = type;\n    this.schema = schema;\n    this.entries = entries;\n    this.coercer = coercer;\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context);\n        return toFailures(result, context, this, value);\n      };\n    } else {\n      this.validator = () => [];\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context);\n        return toFailures(result, context, this, value);\n      };\n    } else {\n      this.refiner = () => [];\n    }\n  }\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n\n  assert(value) {\n    return assert(value, this);\n  }\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n\n  create(value) {\n    return create(value, this);\n  }\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n\n  is(value) {\n    return is(value, this);\n  }\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n\n  mask(value) {\n    return mask(value, this);\n  }\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n\n  validate(value, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return validate(value, this, options);\n  }\n\n}\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nfunction assert(value, struct) {\n  const result = validate(value, struct);\n\n  if (result[0]) {\n    throw result[0];\n  }\n}\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nfunction create(value, struct) {\n  const result = validate(value, struct, {\n    coerce: true\n  });\n\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nfunction mask(value, struct) {\n  const result = validate(value, struct, {\n    coerce: true,\n    mask: true\n  });\n\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Check if a value passes a struct.\n */\n\nfunction is(value, struct) {\n  const result = validate(value, struct);\n  return !result[0];\n}\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nfunction validate(value, struct, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  const tuples = run(value, struct, options);\n  const tuple = shiftIterator(tuples);\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0];\n        }\n      }\n    });\n    return [error, undefined];\n  } else {\n    const v = tuple[1];\n    return [undefined, v];\n  }\n}\n/**\n * Define a new struct type with a custom validation function.\n */\n\nfunction define(name, validator) {\n  return new Struct({\n    type: name,\n    schema: null,\n    validator\n  });\n}\n\n/**\n * Ensure that any value passes validation.\n */\n\nfunction any() {\n  return define('any', () => true);\n}\nfunction array(Element) {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element];\n        }\n      }\n    },\n\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value;\n    },\n\n    validator(value) {\n      return Array.isArray(value) || \"Expected an array value, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value is a boolean.\n */\n\nfunction boolean() {\n  return define('boolean', value => {\n    return typeof value === 'boolean';\n  });\n}\nfunction literal(constant) {\n  const description = print(constant);\n  const t = typeof constant;\n  return new Struct({\n    type: 'literal',\n    schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n\n    validator(value) {\n      return value === constant || \"Expected the literal `\" + description + \"`, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nfunction nullable(struct) {\n  return new Struct({ ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx)\n  });\n}\n/**\n * Ensure that a value is a number.\n */\n\nfunction number() {\n  return define('number', value => {\n    return typeof value === 'number' && !isNaN(value) || \"Expected a number, but received: \" + print(value);\n  });\n}\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nfunction optional(struct) {\n  return new Struct({ ...struct,\n    validator: (value, ctx) => value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx)\n  });\n}\n/**\n * Ensure that a value is a string.\n */\n\nfunction string() {\n  return define('string', value => {\n    return typeof value === 'string' || \"Expected a string, but received: \" + print(value);\n  });\n}\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nfunction type(schema) {\n  const keys = Object.keys(schema);\n  return new Struct({\n    type: 'type',\n    schema,\n\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]];\n        }\n      }\n    },\n\n    validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nfunction union$1(Structs) {\n  const description = Structs.map(s => s.type).join(' | ');\n  return new Struct({\n    type: 'union',\n    schema: null,\n\n    coercer(value, ctx) {\n      const firstMatch = Structs.find(s => {\n        const [e] = s.validate(value, {\n          coerce: true\n        });\n        return !e;\n      }) || unknown();\n      return firstMatch.coercer(value, ctx);\n    },\n\n    validator(value, ctx) {\n      const failures = [];\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx);\n        const [first] = tuples;\n\n        if (!first[0]) {\n          return [];\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure);\n            }\n          }\n        }\n      }\n\n      return [\"Expected the value to satisfy a union of `\" + description + \"`, but received: \" + print(value), ...failures];\n    }\n\n  });\n}\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nfunction unknown() {\n  return define('unknown', () => true);\n}\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nfunction coerce(struct, condition, coercer) {\n  return new Struct({ ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition) ? struct.coercer(coercer(value, ctx), ctx) : struct.coercer(value, ctx);\n    }\n  });\n}\n\n/**\n * Sends a transaction to a program with the given accounts and instruction\n * data.\n */\nasync function invoke(programId, accounts, data, provider) {\n    programId = translateAddress(programId);\n    if (!provider) {\n        provider = getProvider();\n    }\n    const tx = new Transaction();\n    tx.add(new TransactionInstruction({\n        programId,\n        keys: accounts !== null && accounts !== void 0 ? accounts : [],\n        data,\n    }));\n    if (provider.sendAndConfirm === undefined) {\n        throw new Error(\"This function requires 'Provider.sendAndConfirm' to be implemented.\");\n    }\n    return await provider.sendAndConfirm(tx, []);\n}\nconst GET_MULTIPLE_ACCOUNTS_LIMIT = 99;\nasync function getMultipleAccounts(connection, publicKeys, commitment) {\n    const results = await getMultipleAccountsAndContext(connection, publicKeys, commitment);\n    return results.map((result) => {\n        return result\n            ? { publicKey: result.publicKey, account: result.account }\n            : null;\n    });\n}\nasync function getMultipleAccountsAndContext(connection, publicKeys, commitment) {\n    if (publicKeys.length <= GET_MULTIPLE_ACCOUNTS_LIMIT) {\n        return await getMultipleAccountsAndContextCore(connection, publicKeys, commitment);\n    }\n    else {\n        const batches = chunks(publicKeys, GET_MULTIPLE_ACCOUNTS_LIMIT);\n        const results = await Promise.all(batches.map((batch) => getMultipleAccountsAndContextCore(connection, batch, commitment)));\n        return results.flat();\n    }\n}\nasync function getMultipleAccountsAndContextCore(connection, publicKeys, commitmentOverride) {\n    const commitment = commitmentOverride !== null && commitmentOverride !== void 0 ? commitmentOverride : connection.commitment;\n    const { value: accountInfos, context } = await connection.getMultipleAccountsInfoAndContext(publicKeys, commitment);\n    const accounts = accountInfos.map((account, idx) => {\n        if (account === null) {\n            return null;\n        }\n        return {\n            publicKey: publicKeys[idx],\n            account,\n            context,\n        };\n    });\n    return accounts;\n}\n// copy from @solana/web3.js that has a commitment param\nasync function simulateTransaction(connection, transaction, signers, commitment, includeAccounts) {\n    var _a;\n    if (signers && signers.length > 0) {\n        transaction.sign(...signers);\n    }\n    // @ts-expect-error\n    const message = transaction._compile();\n    const signData = message.serialize();\n    // @ts-expect-error\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString(\"base64\");\n    const config = {\n        encoding: \"base64\",\n        commitment: commitment !== null && commitment !== void 0 ? commitment : connection.commitment,\n    };\n    if (includeAccounts) {\n        const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map((key) => key.toBase58());\n        config[\"accounts\"] = {\n            encoding: \"base64\",\n            addresses,\n        };\n    }\n    if (signers && signers.length > 0) {\n        config.sigVerify = true;\n    }\n    const args = [encodedTransaction, config];\n    // @ts-expect-error\n    const unsafeRes = await connection._rpcRequest(\"simulateTransaction\", args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if (\"error\" in res) {\n        let logs;\n        if (\"data\" in res.error) {\n            logs = (_a = res.error.data) === null || _a === void 0 ? void 0 : _a.logs;\n            if (logs && Array.isArray(logs)) {\n                const traceIndent = \"\\n    \";\n                const logTrace = traceIndent + logs.join(traceIndent);\n                console.error(res.error.message, logTrace);\n            }\n        }\n        throw new SendTransactionError(\"failed to simulate transaction: \" + res.error.message, logs);\n    }\n    return res.result;\n}\n// copy from @solana/web3.js\nfunction jsonRpcResult(schema) {\n    return coerce(createRpcResult(schema), UnknownRpcResult, (value) => {\n        if (\"error\" in value) {\n            return value;\n        }\n        else {\n            return {\n                ...value,\n                result: create(value.result, schema),\n            };\n        }\n    });\n}\n// copy from @solana/web3.js\nconst UnknownRpcResult = createRpcResult(unknown());\n// copy from @solana/web3.js\nfunction createRpcResult(result) {\n    return union$1([\n        type({\n            jsonrpc: literal(\"2.0\"),\n            id: string(),\n            result,\n        }),\n        type({\n            jsonrpc: literal(\"2.0\"),\n            id: string(),\n            error: type({\n                code: unknown(),\n                message: string(),\n                data: optional(any()),\n            }),\n        }),\n    ]);\n}\n// copy from @solana/web3.js\nfunction jsonRpcResultAndContext(value) {\n    return jsonRpcResult(type({\n        context: type({\n            slot: number(),\n        }),\n        value,\n    }));\n}\n// copy from @solana/web3.js\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n    err: nullable(union$1([type({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(nullable(array(nullable(type({\n        executable: boolean(),\n        owner: string(),\n        lamports: number(),\n        data: array(string()),\n        rentEpoch: optional(number()),\n    }))))),\n    unitsConsumed: optional(number()),\n}));\n\nvar rpc = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    invoke: invoke,\n    getMultipleAccounts: getMultipleAccounts,\n    getMultipleAccountsAndContext: getMultipleAccountsAndContext,\n    simulateTransaction: simulateTransaction\n});\n\n/**\n * The network and wallet context used to send transactions paid for and signed\n * by the provider.\n */\nclass AnchorProvider {\n    /**\n     * @param connection The cluster connection where the program is deployed.\n     * @param wallet     The wallet used to pay for and sign all transactions.\n     * @param opts       Transaction confirmation options to use by default.\n     */\n    constructor(connection, wallet, opts) {\n        this.connection = connection;\n        this.wallet = wallet;\n        this.opts = opts;\n        this.publicKey = wallet === null || wallet === void 0 ? void 0 : wallet.publicKey;\n    }\n    static defaultOptions() {\n        return {\n            preflightCommitment: \"processed\",\n            commitment: \"processed\",\n        };\n    }\n    /**\n     * Returns a `Provider` with a wallet read from the local filesystem.\n     *\n     * @param url  The network cluster url.\n     * @param opts The default transaction confirmation options.\n     *\n     * (This api is for Node only.)\n     */\n    static local(url, opts) {\n        {\n            throw new Error(`Provider local is not available on browser.`);\n        }\n    }\n    /**\n     * Returns a `Provider` read from the `ANCHOR_PROVIDER_URL` environment\n     * variable\n     *\n     * (This api is for Node only.)\n     */\n    static env() {\n        {\n            throw new Error(`Provider env is not available on browser.`);\n        }\n    }\n    /**\n     * Sends the given transaction, paid for and signed by the provider's wallet.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The signers of the transaction.\n     * @param opts    Transaction confirmation options.\n     */\n    async sendAndConfirm(tx, signers, opts) {\n        var _a, _b, _c, _d;\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        if (isVersionedTransaction(tx)) {\n            if (signers) {\n                tx.sign(signers);\n            }\n        }\n        else {\n            tx.feePayer = (_a = tx.feePayer) !== null && _a !== void 0 ? _a : this.wallet.publicKey;\n            tx.recentBlockhash = (await this.connection.getLatestBlockhash(opts.preflightCommitment)).blockhash;\n            if (signers) {\n                for (const signer of signers) {\n                    tx.partialSign(signer);\n                }\n            }\n        }\n        tx = await this.wallet.signTransaction(tx);\n        const rawTx = tx.serialize();\n        try {\n            return await sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n        }\n        catch (err) {\n            // thrown if the underlying 'confirmTransaction' encounters a failed tx\n            // the 'confirmTransaction' error does not return logs so we make another rpc call to get them\n            if (err instanceof ConfirmError) {\n                // choose the shortest available commitment for 'getTransaction'\n                // (the json RPC does not support any shorter than \"confirmed\" for 'getTransaction')\n                // because that will see the tx sent with `sendAndConfirmRawTransaction` no matter which\n                // commitment `sendAndConfirmRawTransaction` used\n                const txSig = encode$1(isVersionedTransaction(tx)\n                    ? ((_b = tx.signatures) === null || _b === void 0 ? void 0 : _b[0]) || new Uint8Array()\n                    : (_c = tx.signature) !== null && _c !== void 0 ? _c : new Uint8Array());\n                const failedTx = await this.connection.getTransaction(txSig, {\n                    commitment: \"confirmed\",\n                });\n                if (!failedTx) {\n                    throw err;\n                }\n                else {\n                    const logs = (_d = failedTx.meta) === null || _d === void 0 ? void 0 : _d.logMessages;\n                    throw !logs ? err : new SendTransactionError(err.message, logs);\n                }\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    /**\n     * Similar to `send`, but for an array of transactions and signers.\n     * All transactions need to be of the same type, it doesn't support a mix of `VersionedTransaction`s and `Transaction`s.\n     *\n     * @param txWithSigners Array of transactions and signers.\n     * @param opts          Transaction confirmation options.\n     */\n    async sendAll(txWithSigners, opts) {\n        var _a, _b, _c;\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        const recentBlockhash = (await this.connection.getLatestBlockhash(opts.preflightCommitment)).blockhash;\n        let txs = txWithSigners.map((r) => {\n            var _a, _b;\n            if (isVersionedTransaction(r.tx)) {\n                let tx = r.tx;\n                if (r.signers) {\n                    tx.sign(r.signers);\n                }\n                return tx;\n            }\n            else {\n                let tx = r.tx;\n                let signers = (_a = r.signers) !== null && _a !== void 0 ? _a : [];\n                tx.feePayer = (_b = tx.feePayer) !== null && _b !== void 0 ? _b : this.wallet.publicKey;\n                tx.recentBlockhash = recentBlockhash;\n                signers.forEach((kp) => {\n                    tx.partialSign(kp);\n                });\n                return tx;\n            }\n        });\n        const signedTxs = await this.wallet.signAllTransactions(txs);\n        const sigs = [];\n        for (let k = 0; k < txs.length; k += 1) {\n            const tx = signedTxs[k];\n            const rawTx = tx.serialize();\n            try {\n                sigs.push(await sendAndConfirmRawTransaction(this.connection, rawTx, opts));\n            }\n            catch (err) {\n                // thrown if the underlying 'confirmTransaction' encounters a failed tx\n                // the 'confirmTransaction' error does not return logs so we make another rpc call to get them\n                if (err instanceof ConfirmError) {\n                    // choose the shortest available commitment for 'getTransaction'\n                    // (the json RPC does not support any shorter than \"confirmed\" for 'getTransaction')\n                    // because that will see the tx sent with `sendAndConfirmRawTransaction` no matter which\n                    // commitment `sendAndConfirmRawTransaction` used\n                    const txSig = encode$1(isVersionedTransaction(tx)\n                        ? ((_a = tx.signatures) === null || _a === void 0 ? void 0 : _a[0]) || new Uint8Array()\n                        : (_b = tx.signature) !== null && _b !== void 0 ? _b : new Uint8Array());\n                    const failedTx = await this.connection.getTransaction(txSig, {\n                        commitment: \"confirmed\",\n                    });\n                    if (!failedTx) {\n                        throw err;\n                    }\n                    else {\n                        const logs = (_c = failedTx.meta) === null || _c === void 0 ? void 0 : _c.logMessages;\n                        throw !logs ? err : new SendTransactionError(err.message, logs);\n                    }\n                }\n                else {\n                    throw err;\n                }\n            }\n        }\n        return sigs;\n    }\n    /**\n     * Simulates the given transaction, returning emitted logs from execution.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The signers of the transaction. If unset, the transaction\n     *                will be simulated with the \"sigVerify: false\" option. This\n     *                allows for simulation of transactions without asking the\n     *                wallet for a signature.\n     * @param opts    Transaction confirmation options.\n     */\n    async simulate(tx, signers, commitment, includeAccounts) {\n        let recentBlockhash = (await this.connection.getLatestBlockhash(commitment !== null && commitment !== void 0 ? commitment : this.connection.commitment)).blockhash;\n        let result;\n        if (isVersionedTransaction(tx)) {\n            if (signers && signers.length > 0) {\n                tx.sign(signers);\n                tx = await this.wallet.signTransaction(tx);\n            }\n            // Doesn't support includeAccounts which has been changed to something\n            // else in later versions of this function.\n            result = await this.connection.simulateTransaction(tx, { commitment });\n        }\n        else {\n            tx.feePayer = tx.feePayer || this.wallet.publicKey;\n            tx.recentBlockhash = recentBlockhash;\n            if (signers && signers.length > 0) {\n                tx = await this.wallet.signTransaction(tx);\n            }\n            result = await simulateTransaction(this.connection, tx, signers, commitment, includeAccounts);\n        }\n        if (result.value.err) {\n            throw new SimulateError(result.value);\n        }\n        return result.value;\n    }\n}\nclass SimulateError extends Error {\n    constructor(simulationResponse, message) {\n        super(message);\n        this.simulationResponse = simulationResponse;\n    }\n}\n// Copy of Connection.sendAndConfirmRawTransaction that throws\n// a better error if 'confirmTransaction` returns an error status\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, options) {\n    const sendOptions = options && {\n        skipPreflight: options.skipPreflight,\n        preflightCommitment: options.preflightCommitment || options.commitment,\n    };\n    const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n    const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n    if (status.err) {\n        throw new ConfirmError(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n    }\n    return signature;\n}\nclass ConfirmError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\n/**\n * Sets the default provider on the client.\n */\nfunction setProvider(provider) {\n    _provider = provider;\n}\n/**\n * Returns the default provider being used by the client.\n */\nfunction getProvider() {\n    if (_provider === null) {\n        return AnchorProvider.local();\n    }\n    return _provider;\n}\n// Global provider used as the default when a provider is not given.\nlet _provider = null;\n\nconst _AVAILABLE_FEATURES = new Set([\"debug-logs\"]);\nconst _FEATURES = new Map();\nfunction set(key) {\n    if (!_AVAILABLE_FEATURES.has(key)) {\n        throw new Error(\"Invalid feature\");\n    }\n    _FEATURES.set(key, true);\n}\nfunction isSet(key) {\n    return _FEATURES.get(key) !== undefined;\n}\n\nvar features = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    set: set,\n    isSet: isSet\n});\n\nclass IdlError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"IdlError\";\n    }\n}\nclass ProgramErrorStack {\n    constructor(stack) {\n        this.stack = stack;\n    }\n    static parse(logs) {\n        var _a;\n        const programKeyRegex = /^Program (\\w*) invoke/;\n        const successRegex = /^Program \\w* success/;\n        const programStack = [];\n        for (let i = 0; i < logs.length; i++) {\n            if (successRegex.exec(logs[i])) {\n                programStack.pop();\n                continue;\n            }\n            const programKey = (_a = programKeyRegex.exec(logs[i])) === null || _a === void 0 ? void 0 : _a[1];\n            if (!programKey) {\n                continue;\n            }\n            programStack.push(new PublicKey(programKey));\n        }\n        return new ProgramErrorStack(programStack);\n    }\n}\nclass AnchorError extends Error {\n    constructor(errorCode, errorMessage, errorLogs, logs, origin, comparedValues) {\n        super(errorLogs.join(\"\\n\").replace(\"Program log: \", \"\"));\n        this.errorLogs = errorLogs;\n        this.logs = logs;\n        this.error = { errorCode, errorMessage, comparedValues, origin };\n        this._programErrorStack = ProgramErrorStack.parse(logs);\n    }\n    static parse(logs) {\n        if (!logs) {\n            return null;\n        }\n        const anchorErrorLogIndex = logs.findIndex((log) => log.startsWith(\"Program log: AnchorError\"));\n        if (anchorErrorLogIndex === -1) {\n            return null;\n        }\n        const anchorErrorLog = logs[anchorErrorLogIndex];\n        const errorLogs = [anchorErrorLog];\n        let comparedValues;\n        if (anchorErrorLogIndex + 1 < logs.length) {\n            // This catches the comparedValues where the following is logged\n            // <AnchorError>\n            // Left:\n            // <Pubkey>\n            // Right:\n            // <Pubkey>\n            if (logs[anchorErrorLogIndex + 1] === \"Program log: Left:\") {\n                const pubkeyRegex = /^Program log: (.*)$/;\n                const leftPubkey = pubkeyRegex.exec(logs[anchorErrorLogIndex + 2])[1];\n                const rightPubkey = pubkeyRegex.exec(logs[anchorErrorLogIndex + 4])[1];\n                comparedValues = [\n                    new PublicKey(leftPubkey),\n                    new PublicKey(rightPubkey),\n                ];\n                errorLogs.push(...logs.slice(anchorErrorLogIndex + 1, anchorErrorLogIndex + 5));\n            }\n            // This catches the comparedValues where the following is logged\n            // <AnchorError>\n            // Left: <value>\n            // Right: <value>\n            else if (logs[anchorErrorLogIndex + 1].startsWith(\"Program log: Left:\")) {\n                const valueRegex = /^Program log: (Left|Right): (.*)$/;\n                const leftValue = valueRegex.exec(logs[anchorErrorLogIndex + 1])[2];\n                const rightValue = valueRegex.exec(logs[anchorErrorLogIndex + 2])[2];\n                errorLogs.push(...logs.slice(anchorErrorLogIndex + 1, anchorErrorLogIndex + 3));\n                comparedValues = [leftValue, rightValue];\n            }\n        }\n        const regexNoInfo = /^Program log: AnchorError occurred\\. Error Code: (.*)\\. Error Number: (\\d*)\\. Error Message: (.*)\\./;\n        const noInfoAnchorErrorLog = regexNoInfo.exec(anchorErrorLog);\n        const regexFileLine = /^Program log: AnchorError thrown in (.*):(\\d*)\\. Error Code: (.*)\\. Error Number: (\\d*)\\. Error Message: (.*)\\./;\n        const fileLineAnchorErrorLog = regexFileLine.exec(anchorErrorLog);\n        const regexAccountName = /^Program log: AnchorError caused by account: (.*)\\. Error Code: (.*)\\. Error Number: (\\d*)\\. Error Message: (.*)\\./;\n        const accountNameAnchorErrorLog = regexAccountName.exec(anchorErrorLog);\n        if (noInfoAnchorErrorLog) {\n            const [errorCodeString, errorNumber, errorMessage] = noInfoAnchorErrorLog.slice(1, 4);\n            const errorCode = {\n                code: errorCodeString,\n                number: parseInt(errorNumber),\n            };\n            return new AnchorError(errorCode, errorMessage, errorLogs, logs, undefined, comparedValues);\n        }\n        else if (fileLineAnchorErrorLog) {\n            const [file, line, errorCodeString, errorNumber, errorMessage] = fileLineAnchorErrorLog.slice(1, 6);\n            const errorCode = {\n                code: errorCodeString,\n                number: parseInt(errorNumber),\n            };\n            const fileLine = { file, line: parseInt(line) };\n            return new AnchorError(errorCode, errorMessage, errorLogs, logs, fileLine, comparedValues);\n        }\n        else if (accountNameAnchorErrorLog) {\n            const [accountName, errorCodeString, errorNumber, errorMessage] = accountNameAnchorErrorLog.slice(1, 5);\n            const origin = accountName;\n            const errorCode = {\n                code: errorCodeString,\n                number: parseInt(errorNumber),\n            };\n            return new AnchorError(errorCode, errorMessage, errorLogs, logs, origin, comparedValues);\n        }\n        else {\n            return null;\n        }\n    }\n    get program() {\n        return this._programErrorStack.stack[this._programErrorStack.stack.length - 1];\n    }\n    get programErrorStack() {\n        return this._programErrorStack.stack;\n    }\n    toString() {\n        return this.message;\n    }\n}\n// An error from a user defined program.\nclass ProgramError extends Error {\n    constructor(code, msg, logs) {\n        super();\n        this.code = code;\n        this.msg = msg;\n        this.logs = logs;\n        if (logs) {\n            this._programErrorStack = ProgramErrorStack.parse(logs);\n        }\n    }\n    static parse(err, idlErrors) {\n        const errString = err.toString();\n        // TODO: don't rely on the error string. web3.js should preserve the error\n        //       code information instead of giving us an untyped string.\n        let unparsedErrorCode;\n        if (errString.includes(\"custom program error:\")) {\n            let components = errString.split(\"custom program error: \");\n            if (components.length !== 2) {\n                return null;\n            }\n            else {\n                unparsedErrorCode = components[1];\n            }\n        }\n        else {\n            const matches = errString.match(/\"Custom\":([0-9]+)}/g);\n            if (!matches || matches.length > 1) {\n                return null;\n            }\n            unparsedErrorCode = matches[0].match(/([0-9]+)/g)[0];\n        }\n        let errorCode;\n        try {\n            errorCode = parseInt(unparsedErrorCode);\n        }\n        catch (parseErr) {\n            return null;\n        }\n        // Parse user error.\n        let errorMsg = idlErrors.get(errorCode);\n        if (errorMsg !== undefined) {\n            return new ProgramError(errorCode, errorMsg, err.logs);\n        }\n        // Parse framework internal error.\n        errorMsg = LangErrorMessage.get(errorCode);\n        if (errorMsg !== undefined) {\n            return new ProgramError(errorCode, errorMsg, err.logs);\n        }\n        // Unable to parse the error. Just return the untranslated error.\n        return null;\n    }\n    get program() {\n        var _a;\n        return (_a = this._programErrorStack) === null || _a === void 0 ? void 0 : _a.stack[this._programErrorStack.stack.length - 1];\n    }\n    get programErrorStack() {\n        var _a;\n        return (_a = this._programErrorStack) === null || _a === void 0 ? void 0 : _a.stack;\n    }\n    toString() {\n        return this.msg;\n    }\n}\nfunction translateError(err, idlErrors) {\n    if (isSet(\"debug-logs\")) {\n        console.log(\"Translating error:\", err);\n    }\n    const anchorError = AnchorError.parse(err.logs);\n    if (anchorError) {\n        return anchorError;\n    }\n    const programError = ProgramError.parse(err, idlErrors);\n    if (programError) {\n        return programError;\n    }\n    if (err.logs) {\n        const handler = {\n            get: function (target, prop) {\n                if (prop === \"programErrorStack\") {\n                    return target.programErrorStack.stack;\n                }\n                else if (prop === \"program\") {\n                    return target.programErrorStack.stack[err.programErrorStack.stack.length - 1];\n                }\n                else {\n                    // this is the normal way to return all other props\n                    // without modifying them.\n                    // @ts-expect-error\n                    return Reflect.get(...arguments);\n                }\n            },\n        };\n        err.programErrorStack = ProgramErrorStack.parse(err.logs);\n        return new Proxy(err, handler);\n    }\n    return err;\n}\nconst LangErrorCode = {\n    // Instructions.\n    InstructionMissing: 100,\n    InstructionFallbackNotFound: 101,\n    InstructionDidNotDeserialize: 102,\n    InstructionDidNotSerialize: 103,\n    // IDL instructions.\n    IdlInstructionStub: 1000,\n    IdlInstructionInvalidProgram: 1001,\n    // Constraints.\n    ConstraintMut: 2000,\n    ConstraintHasOne: 2001,\n    ConstraintSigner: 2002,\n    ConstraintRaw: 2003,\n    ConstraintOwner: 2004,\n    ConstraintRentExempt: 2005,\n    ConstraintSeeds: 2006,\n    ConstraintExecutable: 2007,\n    ConstraintState: 2008,\n    ConstraintAssociated: 2009,\n    ConstraintAssociatedInit: 2010,\n    ConstraintClose: 2011,\n    ConstraintAddress: 2012,\n    ConstraintZero: 2013,\n    ConstraintTokenMint: 2014,\n    ConstraintTokenOwner: 2015,\n    ConstraintMintMintAuthority: 2016,\n    ConstraintMintFreezeAuthority: 2017,\n    ConstraintMintDecimals: 2018,\n    ConstraintSpace: 2019,\n    ConstraintAccountIsNone: 2020,\n    // Require.\n    RequireViolated: 2500,\n    RequireEqViolated: 2501,\n    RequireKeysEqViolated: 2502,\n    RequireNeqViolated: 2503,\n    RequireKeysNeqViolated: 2504,\n    RequireGtViolated: 2505,\n    RequireGteViolated: 2506,\n    // Accounts.\n    AccountDiscriminatorAlreadySet: 3000,\n    AccountDiscriminatorNotFound: 3001,\n    AccountDiscriminatorMismatch: 3002,\n    AccountDidNotDeserialize: 3003,\n    AccountDidNotSerialize: 3004,\n    AccountNotEnoughKeys: 3005,\n    AccountNotMutable: 3006,\n    AccountOwnedByWrongProgram: 3007,\n    InvalidProgramId: 3008,\n    InvalidProgramExecutable: 3009,\n    AccountNotSigner: 3010,\n    AccountNotSystemOwned: 3011,\n    AccountNotInitialized: 3012,\n    AccountNotProgramData: 3013,\n    AccountNotAssociatedTokenAccount: 3014,\n    AccountSysvarMismatch: 3015,\n    AccountReallocExceedsLimit: 3016,\n    AccountDuplicateReallocs: 3017,\n    // Miscellaneous\n    DeclaredProgramIdMismatch: 4100,\n    // Used for APIs that shouldn't be used anymore.\n    Deprecated: 5000,\n};\nconst LangErrorMessage = new Map([\n    // Instructions.\n    [\n        LangErrorCode.InstructionMissing,\n        \"8 byte instruction identifier not provided\",\n    ],\n    [\n        LangErrorCode.InstructionFallbackNotFound,\n        \"Fallback functions are not supported\",\n    ],\n    [\n        LangErrorCode.InstructionDidNotDeserialize,\n        \"The program could not deserialize the given instruction\",\n    ],\n    [\n        LangErrorCode.InstructionDidNotSerialize,\n        \"The program could not serialize the given instruction\",\n    ],\n    // Idl instructions.\n    [\n        LangErrorCode.IdlInstructionStub,\n        \"The program was compiled without idl instructions\",\n    ],\n    [\n        LangErrorCode.IdlInstructionInvalidProgram,\n        \"The transaction was given an invalid program for the IDL instruction\",\n    ],\n    // Constraints.\n    [LangErrorCode.ConstraintMut, \"A mut constraint was violated\"],\n    [LangErrorCode.ConstraintHasOne, \"A has one constraint was violated\"],\n    [LangErrorCode.ConstraintSigner, \"A signer constraint was violated\"],\n    [LangErrorCode.ConstraintRaw, \"A raw constraint was violated\"],\n    [LangErrorCode.ConstraintOwner, \"An owner constraint was violated\"],\n    [\n        LangErrorCode.ConstraintRentExempt,\n        \"A rent exemption constraint was violated\",\n    ],\n    [LangErrorCode.ConstraintSeeds, \"A seeds constraint was violated\"],\n    [LangErrorCode.ConstraintExecutable, \"An executable constraint was violated\"],\n    [\n        LangErrorCode.ConstraintState,\n        \"Deprecated Error, feel free to replace with something else\",\n    ],\n    [LangErrorCode.ConstraintAssociated, \"An associated constraint was violated\"],\n    [\n        LangErrorCode.ConstraintAssociatedInit,\n        \"An associated init constraint was violated\",\n    ],\n    [LangErrorCode.ConstraintClose, \"A close constraint was violated\"],\n    [LangErrorCode.ConstraintAddress, \"An address constraint was violated\"],\n    [LangErrorCode.ConstraintZero, \"Expected zero account discriminant\"],\n    [LangErrorCode.ConstraintTokenMint, \"A token mint constraint was violated\"],\n    [LangErrorCode.ConstraintTokenOwner, \"A token owner constraint was violated\"],\n    [\n        LangErrorCode.ConstraintMintMintAuthority,\n        \"A mint mint authority constraint was violated\",\n    ],\n    [\n        LangErrorCode.ConstraintMintFreezeAuthority,\n        \"A mint freeze authority constraint was violated\",\n    ],\n    [\n        LangErrorCode.ConstraintMintDecimals,\n        \"A mint decimals constraint was violated\",\n    ],\n    [LangErrorCode.ConstraintSpace, \"A space constraint was violated\"],\n    [\n        LangErrorCode.ConstraintAccountIsNone,\n        \"A required account for the constraint is None\",\n    ],\n    // Require.\n    [LangErrorCode.RequireViolated, \"A require expression was violated\"],\n    [LangErrorCode.RequireEqViolated, \"A require_eq expression was violated\"],\n    [\n        LangErrorCode.RequireKeysEqViolated,\n        \"A require_keys_eq expression was violated\",\n    ],\n    [LangErrorCode.RequireNeqViolated, \"A require_neq expression was violated\"],\n    [\n        LangErrorCode.RequireKeysNeqViolated,\n        \"A require_keys_neq expression was violated\",\n    ],\n    [LangErrorCode.RequireGtViolated, \"A require_gt expression was violated\"],\n    [LangErrorCode.RequireGteViolated, \"A require_gte expression was violated\"],\n    // Accounts.\n    [\n        LangErrorCode.AccountDiscriminatorAlreadySet,\n        \"The account discriminator was already set on this account\",\n    ],\n    [\n        LangErrorCode.AccountDiscriminatorNotFound,\n        \"No 8 byte discriminator was found on the account\",\n    ],\n    [\n        LangErrorCode.AccountDiscriminatorMismatch,\n        \"8 byte discriminator did not match what was expected\",\n    ],\n    [LangErrorCode.AccountDidNotDeserialize, \"Failed to deserialize the account\"],\n    [LangErrorCode.AccountDidNotSerialize, \"Failed to serialize the account\"],\n    [\n        LangErrorCode.AccountNotEnoughKeys,\n        \"Not enough account keys given to the instruction\",\n    ],\n    [LangErrorCode.AccountNotMutable, \"The given account is not mutable\"],\n    [\n        LangErrorCode.AccountOwnedByWrongProgram,\n        \"The given account is owned by a different program than expected\",\n    ],\n    [LangErrorCode.InvalidProgramId, \"Program ID was not as expected\"],\n    [LangErrorCode.InvalidProgramExecutable, \"Program account is not executable\"],\n    [LangErrorCode.AccountNotSigner, \"The given account did not sign\"],\n    [\n        LangErrorCode.AccountNotSystemOwned,\n        \"The given account is not owned by the system program\",\n    ],\n    [\n        LangErrorCode.AccountNotInitialized,\n        \"The program expected this account to be already initialized\",\n    ],\n    [\n        LangErrorCode.AccountNotProgramData,\n        \"The given account is not a program data account\",\n    ],\n    [\n        LangErrorCode.AccountNotAssociatedTokenAccount,\n        \"The given account is not the associated token account\",\n    ],\n    [\n        LangErrorCode.AccountSysvarMismatch,\n        \"The given public key does not match the required sysvar\",\n    ],\n    [\n        LangErrorCode.AccountReallocExceedsLimit,\n        \"The account reallocation exceeds the MAX_PERMITTED_DATA_INCREASE limit\",\n    ],\n    [\n        LangErrorCode.AccountDuplicateReallocs,\n        \"The account was duplicated for more than one reallocation\",\n    ],\n    // Miscellaneous\n    [\n        LangErrorCode.DeclaredProgramIdMismatch,\n        \"The declared program id does not match the actual program id\",\n    ],\n    // Deprecated\n    [\n        LangErrorCode.Deprecated,\n        \"The API being used is deprecated and should no longer be used\",\n    ],\n]);\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign$1 = function() {\r\n    __assign$1 = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign$1.apply(this, arguments);\r\n};\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\n/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\n/**\n * Lower case as a function.\n */\nfunction lowerCase(str) {\n    return str.toLowerCase();\n}\n\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nvar DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n// Remove all non-word characters.\nvar DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nfunction noCase(input, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? \" \" : _d;\n    var result = replace(replace(input, splitRegexp, \"$1\\0$2\"), stripRegexp, \"\\0\");\n    var start = 0;\n    var end = result.length;\n    // Trim the delimiter from around the output string.\n    while (result.charAt(start) === \"\\0\")\n        start++;\n    while (result.charAt(end - 1) === \"\\0\")\n        end--;\n    // Transform each token independently.\n    return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input, re, value) {\n    if (re instanceof RegExp)\n        return input.replace(re, value);\n    return re.reduce(function (input, re) { return input.replace(re, value); }, input);\n}\n\nfunction dotCase(input, options) {\n    if (options === void 0) { options = {}; }\n    return noCase(input, __assign({ delimiter: \".\" }, options));\n}\n\nfunction snakeCase(input, options) {\n    if (options === void 0) { options = {}; }\n    return dotCase(input, __assign$1({ delimiter: \"_\" }, options));\n}\n\nclass IdlCoder {\n    static fieldLayout(field, types) {\n        const fieldName = field.name !== undefined ? camelCase(field.name) : undefined;\n        switch (field.type) {\n            case \"bool\": {\n                return borsh.bool(fieldName);\n            }\n            case \"u8\": {\n                return borsh.u8(fieldName);\n            }\n            case \"i8\": {\n                return borsh.i8(fieldName);\n            }\n            case \"u16\": {\n                return borsh.u16(fieldName);\n            }\n            case \"i16\": {\n                return borsh.i16(fieldName);\n            }\n            case \"u32\": {\n                return borsh.u32(fieldName);\n            }\n            case \"i32\": {\n                return borsh.i32(fieldName);\n            }\n            case \"f32\": {\n                return borsh.f32(fieldName);\n            }\n            case \"u64\": {\n                return borsh.u64(fieldName);\n            }\n            case \"i64\": {\n                return borsh.i64(fieldName);\n            }\n            case \"f64\": {\n                return borsh.f64(fieldName);\n            }\n            case \"u128\": {\n                return borsh.u128(fieldName);\n            }\n            case \"i128\": {\n                return borsh.i128(fieldName);\n            }\n            case \"u256\": {\n                return borsh.u256(fieldName);\n            }\n            case \"i256\": {\n                return borsh.i256(fieldName);\n            }\n            case \"bytes\": {\n                return borsh.vecU8(fieldName);\n            }\n            case \"string\": {\n                return borsh.str(fieldName);\n            }\n            case \"publicKey\": {\n                return borsh.publicKey(fieldName);\n            }\n            default: {\n                if (\"vec\" in field.type) {\n                    return borsh.vec(IdlCoder.fieldLayout({\n                        name: undefined,\n                        type: field.type.vec,\n                    }, types), fieldName);\n                }\n                else if (\"option\" in field.type) {\n                    return borsh.option(IdlCoder.fieldLayout({\n                        name: undefined,\n                        type: field.type.option,\n                    }, types), fieldName);\n                }\n                else if (\"defined\" in field.type) {\n                    // User defined type.\n                    if (!types) {\n                        throw new IdlError(\"User defined types not provided\");\n                    }\n                    const defined = field.type.defined;\n                    const filtered = types.filter((t) => t.name === defined);\n                    if (filtered.length !== 1) {\n                        throw new IdlError(`Type not found: ${JSON.stringify(field)}`);\n                    }\n                    return IdlCoder.typeDefLayout(filtered[0], types, fieldName);\n                }\n                else if (\"array\" in field.type) {\n                    let arrayTy = field.type.array[0];\n                    let arrayLen = field.type.array[1];\n                    let innerLayout = IdlCoder.fieldLayout({\n                        name: undefined,\n                        type: arrayTy,\n                    }, types);\n                    return borsh.array(innerLayout, arrayLen, fieldName);\n                }\n                else {\n                    throw new Error(`Not yet implemented: ${field}`);\n                }\n            }\n        }\n    }\n    static typeDefLayout(typeDef, types = [], name) {\n        switch (typeDef.type.kind) {\n            case \"struct\": {\n                const fieldLayouts = typeDef.type.fields.map((field) => {\n                    return IdlCoder.fieldLayout(field, types);\n                });\n                return borsh.struct(fieldLayouts, name);\n            }\n            case \"enum\": {\n                let variants = typeDef.type.variants.map((variant) => {\n                    const name = camelCase(variant.name);\n                    if (!variant.fields) {\n                        return borsh.struct([], name);\n                    }\n                    const fieldLayouts = variant.fields.map((f, i) => {\n                        if (f === null || f === void 0 ? void 0 : f.name) {\n                            return IdlCoder.fieldLayout(f, types);\n                        }\n                        return IdlCoder.fieldLayout({ type: f, name: i.toString() }, types);\n                    });\n                    return borsh.struct(fieldLayouts, name);\n                });\n                if (name !== undefined) {\n                    // Buffer-layout lib requires the name to be null (on construction)\n                    // when used as a field.\n                    return borsh.rustEnum(variants).replicate(name);\n                }\n                return borsh.rustEnum(variants, name);\n            }\n            case \"alias\": {\n                return IdlCoder.fieldLayout({ type: typeDef.type.value, name: typeDef.name }, types);\n            }\n        }\n    }\n}\n\n/**\n * Namespace for global instruction function signatures (i.e. functions\n * that aren't namespaced by the state or any of its trait implementations).\n */\nconst SIGHASH_GLOBAL_NAMESPACE = \"global\";\n/**\n * Encodes and decodes program instructions.\n */\nclass BorshInstructionCoder {\n    constructor(idl) {\n        this.idl = idl;\n        this.ixLayout = BorshInstructionCoder.parseIxLayout(idl);\n        const sighashLayouts = new Map();\n        idl.instructions.forEach((ix) => {\n            const sh = sighash(SIGHASH_GLOBAL_NAMESPACE, ix.name);\n            sighashLayouts.set(bs58$1.encode(sh), {\n                layout: this.ixLayout.get(ix.name),\n                name: ix.name,\n            });\n        });\n        this.sighashLayouts = sighashLayouts;\n    }\n    /**\n     * Encodes a program instruction.\n     */\n    encode(ixName, ix, discriminator) {\n        return this._encode(ixName, ix, discriminator !== null && discriminator !== void 0 ? discriminator : sighash(SIGHASH_GLOBAL_NAMESPACE, ixName));\n    }\n    _encode(ixName, ix, discriminator) {\n        const buffer = Buffer$1.alloc(1000); // TODO: use a tighter buffer.\n        const methodName = camelCase(ixName);\n        const layout = this.ixLayout.get(methodName);\n        if (!layout) {\n            throw new Error(`Unknown method: ${methodName}`);\n        }\n        const len = layout.encode(ix, buffer);\n        const data = buffer.slice(0, len);\n        return Buffer$1.concat([discriminator, data]);\n    }\n    static parseIxLayout(idl) {\n        const ixLayouts = idl.instructions.map((ix) => {\n            let fieldLayouts = ix.args.map((arg) => {\n                var _a, _b;\n                return IdlCoder.fieldLayout(arg, Array.from([...((_a = idl.accounts) !== null && _a !== void 0 ? _a : []), ...((_b = idl.types) !== null && _b !== void 0 ? _b : [])]));\n            });\n            const name = camelCase(ix.name);\n            return [name, borsh.struct(fieldLayouts, name)];\n        });\n        return new Map(ixLayouts);\n    }\n    /**\n     * Decodes a program instruction.\n     */\n    decode(ix, encoding = \"hex\", ixName) {\n        if (typeof ix === \"string\") {\n            ix = encoding === \"hex\" ? Buffer$1.from(ix, \"hex\") : bs58$1.decode(ix);\n        }\n        // Use the provided method name to get the sighash, ignoring the\n        // discriminator in the instruction data.\n        // This is useful for decoding instructions that have been encoded with a\n        // different namespace, such as an SPL interface.\n        let sighashKey = bs58$1.encode(ixName ? sighash(SIGHASH_GLOBAL_NAMESPACE, ixName) : ix.slice(0, 8));\n        let data = ix.slice(8);\n        const decoder = this.sighashLayouts.get(sighashKey);\n        if (!decoder) {\n            return null;\n        }\n        return {\n            data: decoder.layout.decode(data),\n            name: decoder.name,\n        };\n    }\n    /**\n     * Returns a formatted table of all the fields in the given instruction data.\n     */\n    format(ix, accountMetas) {\n        return InstructionFormatter.format(ix, accountMetas, this.idl);\n    }\n}\nclass InstructionFormatter {\n    static format(ix, accountMetas, idl) {\n        const idlIx = idl.instructions.filter((i) => ix.name === i.name)[0];\n        if (idlIx === undefined) {\n            console.error(\"Invalid instruction given\");\n            return null;\n        }\n        const args = idlIx.args.map((idlField) => {\n            return {\n                name: idlField.name,\n                type: InstructionFormatter.formatIdlType(idlField.type),\n                data: InstructionFormatter.formatIdlData(idlField, ix.data[idlField.name], idl.types),\n            };\n        });\n        const flatIdlAccounts = InstructionFormatter.flattenIdlAccounts(idlIx.accounts);\n        const accounts = accountMetas.map((meta, idx) => {\n            if (idx < flatIdlAccounts.length) {\n                return {\n                    name: flatIdlAccounts[idx].name,\n                    ...meta,\n                };\n            }\n            // \"Remaining accounts\" are unnamed in Anchor.\n            else {\n                return {\n                    name: undefined,\n                    ...meta,\n                };\n            }\n        });\n        return {\n            args,\n            accounts,\n        };\n    }\n    static formatIdlType(idlType) {\n        if (typeof idlType === \"string\") {\n            return idlType;\n        }\n        if (\"vec\" in idlType) {\n            return `Vec<${this.formatIdlType(idlType.vec)}>`;\n        }\n        if (\"option\" in idlType) {\n            return `Option<${this.formatIdlType(idlType.option)}>`;\n        }\n        if (\"defined\" in idlType) {\n            return idlType.defined;\n        }\n        if (\"array\" in idlType) {\n            return `Array<${idlType.array[0]}; ${idlType.array[1]}>`;\n        }\n        throw new Error(`Unknown IDL type: ${idlType}`);\n    }\n    static formatIdlData(idlField, data, types) {\n        if (typeof idlField.type === \"string\") {\n            return data.toString();\n        }\n        if (idlField.type.hasOwnProperty(\"vec\")) {\n            return (\"[\" +\n                data\n                    .map((d) => this.formatIdlData({ name: \"\", type: idlField.type.vec }, d, types))\n                    .join(\", \") +\n                \"]\");\n        }\n        if (idlField.type.hasOwnProperty(\"option\")) {\n            return data === null\n                ? \"null\"\n                : this.formatIdlData({ name: \"\", type: idlField.type.option }, data, types);\n        }\n        if (idlField.type.hasOwnProperty(\"defined\")) {\n            if (types === undefined) {\n                throw new Error(\"User defined types not provided\");\n            }\n            const filtered = types.filter((t) => t.name === idlField.type.defined);\n            if (filtered.length !== 1) {\n                throw new Error(`Type not found: ${idlField.type.defined}`);\n            }\n            return InstructionFormatter.formatIdlDataDefined(filtered[0], data, types);\n        }\n        return \"unknown\";\n    }\n    static formatIdlDataDefined(typeDef, data, types) {\n        switch (typeDef.type.kind) {\n            case \"struct\": {\n                const struct = typeDef.type;\n                const fields = Object.keys(data)\n                    .map((k) => {\n                    const field = struct.fields.find((f) => f.name === k);\n                    if (!field) {\n                        throw new Error(\"Unable to find type\");\n                    }\n                    return (k +\n                        \": \" +\n                        InstructionFormatter.formatIdlData(field, data[k], types));\n                })\n                    .join(\", \");\n                return \"{ \" + fields + \" }\";\n            }\n            case \"enum\": {\n                if (typeDef.type.variants.length === 0) {\n                    return \"{}\";\n                }\n                // Struct enum.\n                if (typeDef.type.variants[0].name) {\n                    const variants = typeDef.type.variants;\n                    const variant = Object.keys(data)[0];\n                    const enumType = data[variant];\n                    const enumVariant = variants.find((v) => camelCase(v.name) === variant);\n                    if (!enumVariant) {\n                        throw new Error(`Unable to find variant \\`${variant}\\``);\n                    }\n                    const fields = enumVariant.fields;\n                    const namedFields = Object.keys(enumType)\n                        .map((f) => {\n                        const fieldData = enumType[f];\n                        const idlField = fields.find((v) => v.name === f);\n                        if (!idlField) {\n                            throw new Error(`Unable to find field \\`${f}\\``);\n                        }\n                        return (f +\n                            \": \" +\n                            InstructionFormatter.formatIdlData(idlField, fieldData, types));\n                    })\n                        .join(\", \");\n                    const variantName = camelCase(variant, { pascalCase: true });\n                    if (namedFields.length === 0) {\n                        return variantName;\n                    }\n                    return `${variantName} { ${namedFields} }`;\n                }\n                // Tuple enum.\n                else {\n                    // TODO.\n                    return \"Tuple formatting not yet implemented\";\n                }\n            }\n            case \"alias\": {\n                return InstructionFormatter.formatIdlType(typeDef.type.value);\n            }\n        }\n    }\n    static flattenIdlAccounts(accounts, prefix) {\n        return accounts\n            .map((account) => {\n            const accName = sentenceCase(account.name);\n            if (account.hasOwnProperty(\"accounts\")) {\n                const newPrefix = prefix ? `${prefix} > ${accName}` : accName;\n                return InstructionFormatter.flattenIdlAccounts(account.accounts, newPrefix);\n            }\n            else {\n                return {\n                    ...account,\n                    name: prefix ? `${prefix} > ${accName}` : accName,\n                };\n            }\n        })\n            .flat();\n    }\n}\nfunction sentenceCase(field) {\n    const result = field.replace(/([A-Z])/g, \" $1\");\n    return result.charAt(0).toUpperCase() + result.slice(1);\n}\n// Not technically sighash, since we don't include the arguments, as Rust\n// doesn't allow function overloading.\nfunction sighash(nameSpace, ixName) {\n    let name = snakeCase(ixName);\n    let preimage = `${nameSpace}:${name}`;\n    return Buffer$1.from(sha256$1(preimage).slice(0, 8));\n}\n\nfunction accountSize(idl, idlAccount) {\n    switch (idlAccount.type.kind) {\n        case \"struct\": {\n            return idlAccount.type.fields\n                .map((f) => typeSize(idl, f.type))\n                .reduce((acc, size) => acc + size, 0);\n        }\n        case \"enum\": {\n            const variantSizes = idlAccount.type.variants.map((variant) => {\n                if (!variant.fields) {\n                    return 0;\n                }\n                return variant.fields\n                    .map((f) => {\n                    // Unnamed enum variant\n                    if (!(typeof f === \"object\" && \"name\" in f)) {\n                        return typeSize(idl, f);\n                    }\n                    // Named enum variant\n                    return typeSize(idl, f.type);\n                })\n                    .reduce((acc, size) => acc + size, 0);\n            });\n            return Math.max(...variantSizes) + 1;\n        }\n        case \"alias\": {\n            return typeSize(idl, idlAccount.type.value);\n        }\n    }\n}\n// Returns the size of the type in bytes. For variable length types, just return\n// 1. Users should override this value in such cases.\nfunction typeSize(idl, ty) {\n    var _a, _b;\n    switch (ty) {\n        case \"bool\":\n            return 1;\n        case \"u8\":\n            return 1;\n        case \"i8\":\n            return 1;\n        case \"i16\":\n            return 2;\n        case \"u16\":\n            return 2;\n        case \"u32\":\n            return 4;\n        case \"i32\":\n            return 4;\n        case \"f32\":\n            return 4;\n        case \"u64\":\n            return 8;\n        case \"i64\":\n            return 8;\n        case \"f64\":\n            return 8;\n        case \"u128\":\n            return 16;\n        case \"i128\":\n            return 16;\n        case \"u256\":\n            return 32;\n        case \"i256\":\n            return 32;\n        case \"bytes\":\n            return 1;\n        case \"string\":\n            return 1;\n        case \"publicKey\":\n            return 32;\n        default:\n            if (\"vec\" in ty) {\n                return 1;\n            }\n            if (\"option\" in ty) {\n                return 1 + typeSize(idl, ty.option);\n            }\n            if (\"coption\" in ty) {\n                return 4 + typeSize(idl, ty.coption);\n            }\n            if (\"defined\" in ty) {\n                const filtered = (_b = (_a = idl.types) === null || _a === void 0 ? void 0 : _a.filter((t) => t.name === ty.defined)) !== null && _b !== void 0 ? _b : [];\n                if (filtered.length !== 1) {\n                    throw new IdlError(`Type not found: ${JSON.stringify(ty)}`);\n                }\n                let typeDef = filtered[0];\n                return accountSize(idl, typeDef);\n            }\n            if (\"array\" in ty) {\n                let arrayTy = ty.array[0];\n                let arraySize = ty.array[1];\n                return typeSize(idl, arrayTy) * arraySize;\n            }\n            throw new Error(`Invalid type ${JSON.stringify(ty)}`);\n    }\n}\n\n/**\n * Number of bytes in anchor discriminators\n */\nconst DISCRIMINATOR_SIZE = 8;\nfunction discriminator(preimage) {\n    return Buffer.from(sha256$1(preimage).slice(0, DISCRIMINATOR_SIZE));\n}\n\n/**\n * Encodes and decodes account objects.\n */\nclass BorshAccountsCoder {\n    constructor(idl) {\n        if (idl.accounts === undefined) {\n            this.accountLayouts = new Map();\n            return;\n        }\n        const layouts = idl.accounts.map((acc) => {\n            return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];\n        });\n        this.accountLayouts = new Map(layouts);\n        this.idl = idl;\n    }\n    async encode(accountName, account) {\n        const buffer = Buffer$1.alloc(1000); // TODO: use a tighter buffer.\n        const layout = this.accountLayouts.get(accountName);\n        if (!layout) {\n            throw new Error(`Unknown account: ${accountName}`);\n        }\n        const len = layout.encode(account, buffer);\n        let accountData = buffer.slice(0, len);\n        let discriminator = BorshAccountsCoder.accountDiscriminator(accountName);\n        return Buffer$1.concat([discriminator, accountData]);\n    }\n    decode(accountName, data) {\n        // Assert the account discriminator is correct.\n        const discriminator = BorshAccountsCoder.accountDiscriminator(accountName);\n        if (discriminator.compare(data.slice(0, 8))) {\n            throw new Error(\"Invalid account discriminator\");\n        }\n        return this.decodeUnchecked(accountName, data);\n    }\n    decodeAny(data) {\n        const accountDescriminator = data.slice(0, 8);\n        const accountName = Array.from(this.accountLayouts.keys()).find((key) => BorshAccountsCoder.accountDiscriminator(key).equals(accountDescriminator));\n        if (!accountName) {\n            throw new Error(\"Account descriminator not found\");\n        }\n        return this.decodeUnchecked(accountName, data);\n    }\n    decodeUnchecked(accountName, ix) {\n        // Chop off the discriminator before decoding.\n        const data = ix.subarray(DISCRIMINATOR_SIZE);\n        const layout = this.accountLayouts.get(accountName);\n        if (!layout) {\n            throw new Error(`Unknown account: ${accountName}`);\n        }\n        return layout.decode(data);\n    }\n    memcmp(accountName, appendData) {\n        const discriminator = BorshAccountsCoder.accountDiscriminator(accountName);\n        return {\n            offset: 0,\n            bytes: bs58$1.encode(appendData ? Buffer$1.concat([discriminator, appendData]) : discriminator),\n        };\n    }\n    size(idlAccount) {\n        var _a;\n        return DISCRIMINATOR_SIZE + ((_a = accountSize(this.idl, idlAccount)) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Calculates and returns a unique 8 byte discriminator prepended to all anchor accounts.\n     *\n     * @param name The name of the account to calculate the discriminator.\n     */\n    static accountDiscriminator(name) {\n        const discriminatorPreimage = `account:${camelCase(name, {\n            pascalCase: true,\n            preserveConsecutiveUppercase: true,\n        })}`;\n        return discriminator(discriminatorPreimage);\n    }\n}\n\nclass BorshEventCoder {\n    constructor(idl) {\n        if (idl.events === undefined) {\n            this.layouts = new Map();\n            return;\n        }\n        const layouts = idl.events.map((event) => {\n            let eventTypeDef = {\n                name: event.name,\n                type: {\n                    kind: \"struct\",\n                    fields: event.fields.map((f) => {\n                        return { name: f.name, type: f.type };\n                    }),\n                },\n            };\n            return [event.name, IdlCoder.typeDefLayout(eventTypeDef, idl.types)];\n        });\n        this.layouts = new Map(layouts);\n        this.discriminators = new Map(idl.events === undefined\n            ? []\n            : idl.events.map((e) => [\n                encode(eventDiscriminator(e.name)),\n                e.name,\n            ]));\n    }\n    decode(log) {\n        let logArr;\n        // This will throw if log length is not a multiple of 4.\n        try {\n            logArr = decode(log);\n        }\n        catch (e) {\n            return null;\n        }\n        const disc = encode(logArr.slice(0, 8));\n        // Only deserialize if the discriminator implies a proper event.\n        const eventName = this.discriminators.get(disc);\n        if (eventName === undefined) {\n            return null;\n        }\n        const layout = this.layouts.get(eventName);\n        if (!layout) {\n            throw new Error(`Unknown event: ${eventName}`);\n        }\n        const data = layout.decode(logArr.slice(8));\n        return { data, name: eventName };\n    }\n}\nfunction eventDiscriminator(name) {\n    return discriminator(`event:${name}`);\n}\n\n/**\n * Encodes and decodes user-defined types.\n */\nclass BorshTypesCoder {\n    constructor(idl) {\n        if (idl.types === undefined) {\n            this.typeLayouts = new Map();\n            return;\n        }\n        const layouts = idl.types.map((acc) => {\n            return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];\n        });\n        this.typeLayouts = new Map(layouts);\n        this.idl = idl;\n    }\n    encode(typeName, type) {\n        const buffer = Buffer$1.alloc(1000); // TODO: use a tighter buffer.\n        const layout = this.typeLayouts.get(typeName);\n        if (!layout) {\n            throw new Error(`Unknown type: ${typeName}`);\n        }\n        const len = layout.encode(type, buffer);\n        return buffer.slice(0, len);\n    }\n    decode(typeName, typeData) {\n        const layout = this.typeLayouts.get(typeName);\n        if (!layout) {\n            throw new Error(`Unknown type: ${typeName}`);\n        }\n        return layout.decode(typeData);\n    }\n}\n\n/**\n * BorshCoder is the default Coder for Anchor programs implementing the\n * borsh based serialization interface.\n */\nclass BorshCoder {\n    constructor(idl) {\n        this.instruction = new BorshInstructionCoder(idl);\n        this.accounts = new BorshAccountsCoder(idl);\n        this.events = new BorshEventCoder(idl);\n        this.types = new BorshTypesCoder(idl);\n    }\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\n/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n  constructor(span, property) {\n    if (!Number.isInteger(span)) {\n      throw new TypeError('span must be an integer');\n    }\n\n    /** The span of the layout in bytes.\n     *\n     * Positive values are generally expected.\n     *\n     * Zero will only appear in {@link Constant}s and in {@link\n     * Sequence}s where the {@link Sequence#count|count} is zero.\n     *\n     * A negative value indicates that the span is value-specific, and\n     * must be obtained using {@link Layout#getSpan|getSpan}. */\n    this.span = span;\n\n    /** The property name used when this layout is represented in an\n     * Object.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances.  If left undefined the span of the unnamed layout will\n     * be treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n    this.property = property;\n  }\n\n  /** Function to create an Object into which decoded properties will\n   * be written.\n   *\n   * Used only for layouts that {@link Layout#decode|decode} to Object\n   * instances, which means:\n   * * {@link Structure}\n   * * {@link Union}\n   * * {@link VariantLayout}\n   * * {@link BitStructure}\n   *\n   * If left undefined the JavaScript representation of these layouts\n   * will be Object instances.\n   *\n   * See {@link bindConstructorLayout}.\n   */\n  makeDestinationObject() {\n    return {};\n  }\n\n  /**\n   * Decode from a Buffer into an JavaScript value.\n   *\n   * @param {Buffer} b - the buffer from which encoded data is read.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {(Number|Array|Object)} - the value of the decoded data.\n   *\n   * @abstract\n   */\n  decode(b, offset) {\n    throw new Error('Layout is abstract');\n  }\n\n  /**\n   * Encode a JavaScript value into a Buffer.\n   *\n   * @param {(Number|Array|Object)} src - the value to be encoded into\n   * the buffer.  The type accepted depends on the (sub-)type of {@link\n   * Layout}.\n   *\n   * @param {Buffer} b - the buffer into which encoded data will be\n   * written.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {Number} - the number of bytes encoded, including the\n   * space skipped for internal padding, but excluding data such as\n   * {@link Sequence#count|lengths} when stored {@link\n   * ExternalLayout|externally}.  This is the adjustment to `offset`\n   * producing the offset where data for the next layout would be\n   * written.\n   *\n   * @abstract\n   */\n  encode(src, b, offset) {\n    throw new Error('Layout is abstract');\n  }\n\n  /**\n   * Calculate the span of a specific instance of a layout.\n   *\n   * @param {Buffer} b - the buffer that contains an encoded instance.\n   *\n   * @param {Number} [offset] - the offset at which the encoded instance\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @return {Number} - the number of bytes covered by the layout\n   * instance.  If this method is not overridden in a subclass the\n   * definition-time constant {@link Layout#span|span} will be\n   * returned.\n   *\n   * @throws {RangeError} - if the length of the value cannot be\n   * determined.\n   */\n  getSpan(b, offset) {\n    if (0 > this.span) {\n      throw new RangeError('indeterminate span');\n    }\n    return this.span;\n  }\n\n  /**\n   * Replicate the layout using a new property.\n   *\n   * This function must be used to get a structurally-equivalent layout\n   * with a different name since all {@link Layout} instances are\n   * immutable.\n   *\n   * **NOTE** This is a shallow copy.  All fields except {@link\n   * Layout#property|property} are strictly equal to the origin layout.\n   *\n   * @param {String} property - the value for {@link\n   * Layout#property|property} in the replica.\n   *\n   * @returns {Layout} - the copy with {@link Layout#property|property}\n   * set to `property`.\n   */\n  replicate(property) {\n    const rv = Object.create(this.constructor.prototype);\n    Object.assign(rv, this);\n    rv.property = property;\n    return rv;\n  }\n\n  /**\n   * Create an object from layout properties and an array of values.\n   *\n   * **NOTE** This function returns `undefined` if invoked on a layout\n   * that does not return its value as an Object.  Objects are\n   * returned for things that are a {@link Structure}, which includes\n   * {@link VariantLayout|variant layouts} if they are structures, and\n   * excludes {@link Union}s.  If you want this feature for a union\n   * you must use {@link Union.getVariant|getVariant} to select the\n   * desired layout.\n   *\n   * @param {Array} values - an array of values that correspond to the\n   * default order for properties.  As with {@link Layout#decode|decode}\n   * layout elements that have no property name are skipped when\n   * iterating over the array values.  Only the top-level properties are\n   * assigned; arguments are not assigned to properties of contained\n   * layouts.  Any unused values are ignored.\n   *\n   * @return {(Object|undefined)}\n   */\n  fromArray(values) {\n    return undefined;\n  }\n}\nvar Layout_2 = Layout;\n\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n  if (lo.property) {\n    return name + '[' + lo.property + ']';\n  }\n  return name;\n}\n\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n  /**\n   * Return `true` iff the external layout decodes to an unsigned\n   * integer layout.\n   *\n   * In that case it can be used as the source of {@link\n   * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n   * or as {@link UnionLayoutDiscriminator#layout|external union\n   * discriminators}.\n   *\n   * @abstract\n   */\n  isCount() {\n    throw new Error('ExternalLayout is abstract');\n  }\n}\n\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n  constructor(layout, offset, property) {\n    if (!(layout instanceof Layout)) {\n      throw new TypeError('layout must be a Layout');\n    }\n\n    if (undefined === offset) {\n      offset = 0;\n    } else if (!Number.isInteger(offset)) {\n      throw new TypeError('offset must be integer or undefined');\n    }\n\n    super(layout.span, property || layout.property);\n\n    /** The subordinated layout. */\n    this.layout = layout;\n\n    /** The location of {@link OffsetLayout#layout} relative to the\n     * start of another layout.\n     *\n     * The value may be positive or negative, but an error will thrown\n     * if at the point of use it goes outside the span of the Buffer\n     * being accessed.  */\n    this.offset = offset;\n  }\n\n  /** @override */\n  isCount() {\n    return ((this.layout instanceof UInt)\n            || (this.layout instanceof UIntBE));\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return this.layout.decode(b, offset + this.offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return this.layout.encode(src, b, offset + this.offset);\n  }\n}\n\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readUIntLE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeUIntLE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n  constructor(span, property) {\n    super( span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readUIntBE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeUIntBE(src, offset, this.span);\n    return this.span;\n  }\n}\n\nconst V2E32 = Math.pow(2, 32);\n\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n  const hi32 = Math.floor(src / V2E32);\n  const lo32 = src - (hi32 * V2E32);\n  return {hi32, lo32};\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n  return hi32 * V2E32 + lo32;\n}\n\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const lo32 = b.readUInt32LE(offset);\n    const hi32 = b.readUInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32LE(split.lo32, offset);\n    b.writeUInt32LE(split.hi32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const lo32 = b.readUInt32LE(offset);\n    const hi32 = b.readInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32LE(split.lo32, offset);\n    b.writeInt32LE(split.hi32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n  constructor(fields, property, decodePrefixes) {\n    if (!(Array.isArray(fields)\n          && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {\n      throw new TypeError('fields must be array of Layout instances');\n    }\n    if (('boolean' === typeof property)\n        && (undefined === decodePrefixes)) {\n      decodePrefixes = property;\n      property = undefined;\n    }\n\n    /* Verify absence of unnamed variable-length fields. */\n    for (const fd of fields) {\n      if ((0 > fd.span)\n          && (undefined === fd.property)) {\n        throw new Error('fields cannot contain unnamed variable-length layout');\n      }\n    }\n\n    let span = -1;\n    try {\n      span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n    } catch (e) {\n    }\n    super(span, property);\n\n    /** The sequence of {@link Layout} values that comprise the\n     * structure.\n     *\n     * The individual elements need not be the same type, and may be\n     * either scalar or aggregate layouts.  If a member layout leaves\n     * its {@link Layout#property|property} undefined the\n     * corresponding region of the buffer associated with the element\n     * will not be mutated.\n     *\n     * @type {Layout[]} */\n    this.fields = fields;\n\n    /** Control behavior of {@link Layout#decode|decode()} given short\n     * buffers.\n     *\n     * In some situations a structure many be extended with additional\n     * fields over time, with older installations providing only a\n     * prefix of the full structure.  If this property is `true`\n     * decoding will accept those buffers and leave subsequent fields\n     * undefined, as long as the buffer ends at a field boundary.\n     * Defaults to `false`. */\n    this.decodePrefixes = !!decodePrefixes;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = 0;\n    try {\n      span = this.fields.reduce((span, fd) => {\n        const fsp = fd.getSpan(b, offset);\n        offset += fsp;\n        return span + fsp;\n      }, 0);\n    } catch (e) {\n      throw new RangeError('indeterminate span');\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const dest = this.makeDestinationObject();\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(b, offset);\n      }\n      offset += fd.getSpan(b, offset);\n      if (this.decodePrefixes\n          && (b.length === offset)) {\n        break;\n      }\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Structure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the buffer is\n   * left unmodified. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const firstOffset = offset;\n    let lastOffset = 0;\n    let lastWrote = 0;\n    for (const fd of this.fields) {\n      let span = fd.span;\n      lastWrote = (0 < span) ? span : 0;\n      if (undefined !== fd.property) {\n        const fv = src[fd.property];\n        if (undefined !== fv) {\n          lastWrote = fd.encode(fv, b, offset);\n          if (0 > span) {\n            /* Read the as-encoded span, which is not necessarily the\n             * same as what we wrote. */\n            span = fd.getSpan(b, offset);\n          }\n        }\n      }\n      lastOffset = offset;\n      offset += span;\n    }\n    /* Use (lastOffset + lastWrote) instead of offset because the last\n     * item may have had a dynamic length and we don't want to include\n     * the padding between it and the end of the space reserved for\n     * it. */\n    return (lastOffset + lastWrote) - firstOffset;\n  }\n\n  /** @override */\n  fromArray(values) {\n    const dest = this.makeDestinationObject();\n    for (const fd of this.fields) {\n      if ((undefined !== fd.property)\n          && (0 < values.length)) {\n        dest[fd.property] = values.shift();\n      }\n    }\n    return dest;\n  }\n\n  /**\n   * Get access to the layout of a given property.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Layout} - the layout associated with `property`, or\n   * undefined if there is no such property.\n   */\n  layoutFor(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n  }\n\n  /**\n   * Get the offset of a structure member.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Number} - the offset in bytes to the start of `property`\n   * within the structure, or undefined if `property` is not a field\n   * within the structure.  If the property is a member but follows a\n   * variable-length structure member a negative number will be\n   * returned.\n   */\n  offsetOf(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    let offset = 0;\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return offset;\n      }\n      if (0 > fd.span) {\n        offset = -1;\n      } else if (0 <= offset) {\n        offset += fd.span;\n      }\n    }\n  }\n}\n\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n  constructor(property) {\n    /** The {@link Layout#property|property} to be used when the\n     * discriminator is referenced in isolation (generally when {@link\n     * Union#decode|Union decode} cannot delegate to a specific\n     * variant). */\n    this.property = property;\n  }\n\n  /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n   *\n   * The implementation of this method need not reference the buffer if\n   * variant information is available through other means. */\n  decode() {\n    throw new Error('UnionDiscriminator is abstract');\n  }\n\n  /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n   *\n   * The implementation of this method need not store the value if\n   * variant information is maintained through other means. */\n  encode() {\n    throw new Error('UnionDiscriminator is abstract');\n  }\n}\n\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n  constructor(layout, property) {\n    if (!((layout instanceof ExternalLayout)\n          && layout.isCount())) {\n      throw new TypeError('layout must be an unsigned integer ExternalLayout');\n    }\n\n    super(property || layout.property || 'variant');\n\n    /** The {@link ExternalLayout} used to access the discriminator\n     * value. */\n    this.layout = layout;\n  }\n\n  /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  decode(b, offset) {\n    return this.layout.decode(b, offset);\n  }\n\n  /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  encode(src, b, offset) {\n    return this.layout.encode(src, b, offset);\n  }\n}\n\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n  constructor(discr, defaultLayout, property) {\n    const upv = ((discr instanceof UInt)\n               || (discr instanceof UIntBE));\n    if (upv) {\n      discr = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n    } else if ((discr instanceof ExternalLayout)\n               && discr.isCount()) {\n      discr = new UnionLayoutDiscriminator(discr);\n    } else if (!(discr instanceof UnionDiscriminator)) {\n      throw new TypeError('discr must be a UnionDiscriminator '\n                          + 'or an unsigned integer layout');\n    }\n    if (undefined === defaultLayout) {\n      defaultLayout = null;\n    }\n    if (!((null === defaultLayout)\n          || (defaultLayout instanceof Layout))) {\n      throw new TypeError('defaultLayout must be null or a Layout');\n    }\n    if (null !== defaultLayout) {\n      if (0 > defaultLayout.span) {\n        throw new Error('defaultLayout must have constant span');\n      }\n      if (undefined === defaultLayout.property) {\n        defaultLayout = defaultLayout.replicate('content');\n      }\n    }\n\n    /* The union span can be estimated only if there's a default\n     * layout.  The union spans its default layout, plus any prefix\n     * variant layout.  By construction both layouts, if present, have\n     * non-negative span. */\n    let span = -1;\n    if (defaultLayout) {\n      span = defaultLayout.span;\n      if ((0 <= span) && upv) {\n        span += discr.layout.span;\n      }\n    }\n    super(span, property);\n\n    /** The interface for the discriminator value in isolation.\n     *\n     * This a {@link UnionDiscriminator} either passed to the\n     * constructor or synthesized from the `discr` constructor\n     * argument.  {@link\n     * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n     * `true` iff the `discr` parameter was a non-offset {@link\n     * Layout} instance. */\n    this.discriminator = discr;\n\n    /** `true` if the {@link Union#discriminator|discriminator} is the\n     * first field in the union.\n     *\n     * If `false` the discriminator is obtained from somewhere\n     * else. */\n    this.usesPrefixDiscriminator = upv;\n\n    /** The layout for non-discriminator content when the value of the\n     * discriminator is not recognized.\n     *\n     * This is the value passed to the constructor.  It is\n     * structurally equivalent to the second component of {@link\n     * Union#layout|layout} but may have a different property\n     * name. */\n    this.defaultLayout = defaultLayout;\n\n    /** A registry of allowed variants.\n     *\n     * The keys are unsigned integers which should be compatible with\n     * {@link Union.discriminator|discriminator}.  The property value\n     * is the corresponding {@link VariantLayout} instances assigned\n     * to this union by {@link Union#addVariant|addVariant}.\n     *\n     * **NOTE** The registry remains mutable so that variants can be\n     * {@link Union#addVariant|added} at any time.  Users should not\n     * manipulate the content of this property. */\n    this.registry = {};\n\n    /* Private variable used when invoking getSourceVariant */\n    let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n\n    /** Function to infer the variant selected by a source object.\n     *\n     * Defaults to {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n     * be overridden using {@link\n     * Union#configGetSourceVariant|configGetSourceVariant}.\n     *\n     * @param {Object} src - as with {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * @returns {(undefined|VariantLayout)} The default variant\n     * (`undefined`) or first registered variant that uses a property\n     * available in `src`. */\n    this.getSourceVariant = function(src) {\n      return boundGetSourceVariant(src);\n    };\n\n    /** Function to override the implementation of {@link\n     * Union#getSourceVariant|getSourceVariant}.\n     *\n     * Use this if the desired variant cannot be identified using the\n     * algorithm of {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * **NOTE** The provided function will be invoked bound to this\n     * Union instance, providing local access to {@link\n     * Union#registry|registry}.\n     *\n     * @param {Function} gsv - a function that follows the API of\n     * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n    this.configGetSourceVariant = function(gsv) {\n      boundGetSourceVariant = gsv.bind(this);\n    };\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Default layouts always have non-negative span, so we don't have\n     * one and we have to recognize the variant which will in turn\n     * determine the span. */\n    const vlo = this.getVariant(b, offset);\n    if (!vlo) {\n      throw new Error('unable to determine span for unrecognized variant');\n    }\n    return vlo.getSpan(b, offset);\n  }\n\n  /**\n   * Method to infer a registered Union variant compatible with `src`.\n   *\n   * The first satisified rule in the following sequence defines the\n   * return value:\n   * * If `src` has properties matching the Union discriminator and\n   *   the default layout, `undefined` is returned regardless of the\n   *   value of the discriminator property (this ensures the default\n   *   layout will be used);\n   * * If `src` has a property matching the Union discriminator, the\n   *   value of the discriminator identifies a registered variant, and\n   *   either (a) the variant has no layout, or (b) `src` has the\n   *   variant's property, then the variant is returned (because the\n   *   source satisfies the constraints of the variant it identifies);\n   * * If `src` does not have a property matching the Union\n   *   discriminator, but does have a property matching a registered\n   *   variant, then the variant is returned (because the source\n   *   matches a variant without an explicit conflict);\n   * * An error is thrown (because we either can't identify a variant,\n   *   or we were explicitly told the variant but can't satisfy it).\n   *\n   * @param {Object} src - an object presumed to be compatible with\n   * the content of the Union.\n   *\n   * @return {(undefined|VariantLayout)} - as described above.\n   *\n   * @throws {Error} - if `src` cannot be associated with a default or\n   * registered variant.\n   */\n  defaultGetSourceVariant(src) {\n    if (src.hasOwnProperty(this.discriminator.property)) {\n      if (this.defaultLayout\n          && src.hasOwnProperty(this.defaultLayout.property)) {\n        return undefined;\n      }\n      const vlo = this.registry[src[this.discriminator.property]];\n      if (vlo\n          && ((!vlo.layout)\n              || src.hasOwnProperty(vlo.property))) {\n        return vlo;\n      }\n    } else {\n      for (const tag in this.registry) {\n        const vlo = this.registry[tag];\n        if (src.hasOwnProperty(vlo.property)) {\n          return vlo;\n        }\n      }\n    }\n    throw new Error('unable to infer src variant');\n  }\n\n  /** Implement {@link Layout#decode|decode} for {@link Union}.\n   *\n   * If the variant is {@link Union#addVariant|registered} the return\n   * value is an instance of that variant, with no explicit\n   * discriminator.  Otherwise the {@link Union#defaultLayout|default\n   * layout} is used to decode the content. */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let dest;\n    const dlo = this.discriminator;\n    const discr = dlo.decode(b, offset);\n    let clo = this.registry[discr];\n    if (undefined === clo) {\n      let contentOffset = 0;\n      clo = this.defaultLayout;\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n      dest = this.makeDestinationObject();\n      dest[dlo.property] = discr;\n      dest[clo.property] = this.defaultLayout.decode(b, offset + contentOffset);\n    } else {\n      dest = clo.decode(b, offset);\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Union}.\n   *\n   * This API assumes the `src` object is consistent with the union's\n   * {@link Union#defaultLayout|default layout}.  To encode variants\n   * use the appropriate variant-specific {@link VariantLayout#encode}\n   * method. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const vlo = this.getSourceVariant(src);\n    if (undefined === vlo) {\n      const dlo = this.discriminator;\n      const clo = this.defaultLayout;\n      let contentOffset = 0;\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n      dlo.encode(src[dlo.property], b, offset);\n      return contentOffset + clo.encode(src[clo.property], b,\n                                        offset + contentOffset);\n    }\n    return vlo.encode(src, b, offset);\n  }\n\n  /** Register a new variant structure within a union.  The newly\n   * created variant is returned.\n   *\n   * @param {Number} variant - initializer for {@link\n   * VariantLayout#variant|variant}.\n   *\n   * @param {Layout} layout - initializer for {@link\n   * VariantLayout#layout|layout}.\n   *\n   * @param {String} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {VariantLayout} */\n  addVariant(variant, layout, property) {\n    const rv = new VariantLayout(this, variant, layout, property);\n    this.registry[variant] = rv;\n    return rv;\n  }\n\n  /**\n   * Get the layout associated with a registered variant.\n   *\n   * If `vb` does not produce a registered variant the function returns\n   * `undefined`.\n   *\n   * @param {(Number|Buffer)} vb - either the variant number, or a\n   * buffer from which the discriminator is to be read.\n   *\n   * @param {Number} offset - offset into `vb` for the start of the\n   * union.  Used only when `vb` is an instance of {Buffer}.\n   *\n   * @return {({VariantLayout}|undefined)}\n   */\n  getVariant(vb, offset) {\n    let variant = vb;\n    if (Buffer.isBuffer(vb)) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n      variant = this.discriminator.decode(vb, offset);\n    }\n    return this.registry[variant];\n  }\n}\n\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n  constructor(union, variant, layout, property) {\n    if (!(union instanceof Union)) {\n      throw new TypeError('union must be a Union');\n    }\n    if ((!Number.isInteger(variant)) || (0 > variant)) {\n      throw new TypeError('variant must be a (non-negative) integer');\n    }\n    if (('string' === typeof layout)\n        && (undefined === property)) {\n      property = layout;\n      layout = null;\n    }\n    if (layout) {\n      if (!(layout instanceof Layout)) {\n        throw new TypeError('layout must be a Layout');\n      }\n      if ((null !== union.defaultLayout)\n          && (0 <= layout.span)\n          && (layout.span > union.defaultLayout.span)) {\n        throw new Error('variant span exceeds span of containing union');\n      }\n      if ('string' !== typeof property) {\n        throw new TypeError('variant must have a String property');\n      }\n    }\n    let span = union.span;\n    if (0 > union.span) {\n      span = layout ? layout.span : 0;\n      if ((0 <= span) && union.usesPrefixDiscriminator) {\n        span += union.discriminator.layout.span;\n      }\n    }\n    super(span, property);\n\n    /** The {@link Union} to which this variant belongs. */\n    this.union = union;\n\n    /** The unsigned integral value identifying this variant within\n     * the {@link Union#discriminator|discriminator} of the containing\n     * union. */\n    this.variant = variant;\n\n    /** The {@link Layout} to be used when reading/writing the\n     * non-discriminator part of the {@link\n     * VariantLayout#union|union}.  If `null` the variant carries no\n     * data. */\n    this.layout = layout || null;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      /* Will be equal to the containing union span if that is not\n       * variable. */\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    /* Span is defined solely by the variant (and prefix discriminator) */\n    return contentOffset + this.layout.getSpan(b, offset + contentOffset);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    const dest = this.makeDestinationObject();\n    if (undefined === offset) {\n      offset = 0;\n    }\n    if (this !== this.union.getVariant(b, offset)) {\n      throw new Error('variant mismatch');\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    if (this.layout) {\n      dest[this.property] = this.layout.decode(b, offset + contentOffset);\n    } else if (this.property) {\n      dest[this.property] = true;\n    } else if (this.union.usesPrefixDiscriminator) {\n      dest[this.union.discriminator.property] = this.variant;\n    }\n    return dest;\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    if (this.layout\n        && (!src.hasOwnProperty(this.property))) {\n      throw new TypeError('variant lacks property ' + this.property);\n    }\n    this.union.discriminator.encode(this.variant, b, offset);\n    let span = contentOffset;\n    if (this.layout) {\n      this.layout.encode(src[this.property], b, offset + contentOffset);\n      span += this.layout.getSpan(b, offset + contentOffset);\n      if ((0 <= this.union.span)\n          && (span > this.union.span)) {\n        throw new Error('encoded variant overruns containing union');\n      }\n    }\n    return span;\n  }\n\n  /** Delegate {@link Layout#fromArray|fromArray} to {@link\n   * VariantLayout#layout|layout}. */\n  fromArray(values) {\n    if (this.layout) {\n      return this.layout.fromArray(values);\n    }\n  }\n}\n/* eslint-enable no-extend-native */\n\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Buffer.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob$1 extends Layout {\n  constructor(length, property) {\n    if (!(((length instanceof ExternalLayout) && length.isCount())\n          || (Number.isInteger(length) && (0 <= length)))) {\n      throw new TypeError('length must be positive integer '\n                          + 'or an unsigned integer ExternalLayout');\n    }\n\n    let span = -1;\n    if (!(length instanceof ExternalLayout)) {\n      span = length;\n    }\n    super(span, property);\n\n    /** The number of bytes in the blob.\n     *\n     * This may be a non-negative integer, or an instance of {@link\n     * ExternalLayout} that satisfies {@link\n     * ExternalLayout#isCount|isCount()}. */\n    this.length = length;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    let span = this.span;\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.span;\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n    return b.slice(offset, offset + span);\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Blob}.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n  encode(src, b, offset) {\n    let span = this.length;\n    if (this.length instanceof ExternalLayout) {\n      span = src.length;\n    }\n    if (!(Buffer.isBuffer(src)\n          && (span === src.length))) {\n      throw new TypeError(nameWithProperty('Blob.encode', this)\n                          + ' requires (length ' + span + ') Buffer as src');\n    }\n    if ((offset + span) > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    b.write(src.toString('hex'), offset, span, 'hex');\n    if (this.length instanceof ExternalLayout) {\n      this.length.encode(span, b, offset);\n    }\n    return span;\n  }\n}\n\n/** Factory for {@link OffsetLayout}. */\nvar offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));\n\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nvar u8 = (property => new UInt(1, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nvar u32 = (property => new UInt(4, property));\n\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nvar nu64 = (property => new NearUInt64(property));\n\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nvar ns64 = (property => new NearInt64(property));\n\n/** Factory for {@link Structure} values. */\nvar struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));\n\n/** Factory for {@link Union} values. */\nvar union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));\n\n/** Factory for {@link Blob} values. */\nvar blob = ((length, property) => new Blob$1(length, property));\n\nclass SystemInstructionCoder {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    constructor(_) { }\n    encode(ixName, ix) {\n        switch (camelCase(ixName)) {\n            case \"createAccount\": {\n                return encodeCreateAccount(ix);\n            }\n            case \"assign\": {\n                return encodeAssign(ix);\n            }\n            case \"transfer\": {\n                return encodeTransfer(ix);\n            }\n            case \"createAccountWithSeed\": {\n                return encodeCreateAccountWithSeed(ix);\n            }\n            case \"advanceNonceAccount\": {\n                return encodeAdvanceNonceAccount(ix);\n            }\n            case \"withdrawNonceAccount\": {\n                return encodeWithdrawNonceAccount(ix);\n            }\n            case \"initializeNonceAccount\": {\n                return encodeInitializeNonceAccount(ix);\n            }\n            case \"authorizeNonceAccount\": {\n                return encodeAuthorizeNonceAccount(ix);\n            }\n            case \"allocate\": {\n                return encodeAllocate(ix);\n            }\n            case \"allocateWithSeed\": {\n                return encodeAllocateWithSeed(ix);\n            }\n            case \"assignWithSeed\": {\n                return encodeAssignWithSeed(ix);\n            }\n            case \"transferWithSeed\": {\n                return encodeTransferWithSeed(ix);\n            }\n            default: {\n                throw new Error(`Invalid instruction: ${ixName}`);\n            }\n        }\n    }\n    encodeState(_ixName, _ix) {\n        throw new Error(\"System does not have state\");\n    }\n}\nclass RustStringLayout extends Layout_2 {\n    constructor(property) {\n        super(-1, property);\n        this.property = property;\n        this.layout = struct([\n            u32(\"length\"),\n            u32(\"lengthPadding\"),\n            blob(offset(u32(), -8), \"chars\"),\n        ], this.property);\n    }\n    encode(src, b, offset = 0) {\n        if (src === null || src === undefined) {\n            return this.layout.span;\n        }\n        const data = {\n            chars: Buffer.from(src, \"utf8\"),\n        };\n        return this.layout.encode(data, b, offset);\n    }\n    decode(b, offset = 0) {\n        const data = this.layout.decode(b, offset);\n        return data[\"chars\"].toString();\n    }\n    getSpan(b, offset = 0) {\n        return (u32().span +\n            u32().span +\n            new BN(new Uint8Array(b).slice(offset, offset + 4), 10, \"le\").toNumber());\n    }\n}\nfunction rustStringLayout(property) {\n    return new RustStringLayout(property);\n}\nfunction publicKey$2(property) {\n    return blob(32, property);\n}\nfunction encodeCreateAccount({ lamports, space, owner }) {\n    return encodeData({\n        createAccount: { lamports, space, owner: owner.toBuffer() },\n    });\n}\nfunction encodeAssign({ owner }) {\n    return encodeData({\n        assign: { owner: owner.toBuffer() },\n    });\n}\nfunction encodeTransfer({ lamports }) {\n    return encodeData({\n        transfer: { lamports },\n    });\n}\nfunction encodeCreateAccountWithSeed({ base, seed, lamports, space, owner, }) {\n    return encodeData({\n        createAccountWithSeed: {\n            base: base.toBuffer(),\n            seed,\n            lamports,\n            space,\n            owner: owner.toBuffer(),\n        },\n    }, LAYOUT.getVariant(3).span + seed.length);\n}\nfunction encodeInitializeNonceAccount({ authorized }) {\n    return encodeData({\n        initializeNonceAccount: { authorized: authorized.toBuffer() },\n    });\n}\nfunction encodeAdvanceNonceAccount({ authorized }) {\n    return encodeData({\n        advanceNonceAccount: { authorized: authorized.toBuffer() },\n    });\n}\nfunction encodeWithdrawNonceAccount({ lamports }) {\n    return encodeData({\n        withdrawNonceAccount: { lamports },\n    });\n}\nfunction encodeAuthorizeNonceAccount({ authorized }) {\n    return encodeData({\n        authorizeNonceAccount: { authorized: authorized.toBuffer() },\n    });\n}\nfunction encodeAllocate({ space }) {\n    return encodeData({\n        allocate: { space },\n    });\n}\nfunction encodeAllocateWithSeed({ base, seed, space, owner }) {\n    return encodeData({\n        allocateWithSeed: {\n            base: base.toBuffer(),\n            seed,\n            space,\n            owner: owner.toBuffer(),\n        },\n    }, LAYOUT.getVariant(9).span + seed.length);\n}\nfunction encodeAssignWithSeed({ base, seed, owner }) {\n    return encodeData({\n        assignWithSeed: {\n            base: base.toBuffer(),\n            seed,\n            owner: owner.toBuffer(),\n        },\n    }, LAYOUT.getVariant(10).span + seed.length);\n}\nfunction encodeTransferWithSeed({ lamports, seed, owner }) {\n    return encodeData({\n        transferWithSeed: {\n            lamports,\n            seed,\n            owner: owner.toBuffer(),\n        },\n    }, LAYOUT.getVariant(11).span + seed.length);\n}\nconst LAYOUT = union(u32(\"instruction\"));\nLAYOUT.addVariant(0, struct([\n    ns64(\"lamports\"),\n    ns64(\"space\"),\n    publicKey$2(\"owner\"),\n]), \"createAccount\");\nLAYOUT.addVariant(1, struct([publicKey$2(\"owner\")]), \"assign\");\nLAYOUT.addVariant(2, struct([ns64(\"lamports\")]), \"transfer\");\nLAYOUT.addVariant(3, struct([\n    publicKey$2(\"base\"),\n    rustStringLayout(\"seed\"),\n    ns64(\"lamports\"),\n    ns64(\"space\"),\n    publicKey$2(\"owner\"),\n]), \"createAccountWithSeed\");\nLAYOUT.addVariant(4, struct([publicKey$2(\"authorized\")]), \"advanceNonceAccount\");\nLAYOUT.addVariant(5, struct([ns64(\"lamports\")]), \"withdrawNonceAccount\");\nLAYOUT.addVariant(6, struct([publicKey$2(\"authorized\")]), \"initializeNonceAccount\");\nLAYOUT.addVariant(7, struct([publicKey$2(\"authorized\")]), \"authorizeNonceAccount\");\nLAYOUT.addVariant(8, struct([ns64(\"space\")]), \"allocate\");\nLAYOUT.addVariant(9, struct([\n    publicKey$2(\"base\"),\n    rustStringLayout(\"seed\"),\n    ns64(\"space\"),\n    publicKey$2(\"owner\"),\n]), \"allocateWithSeed\");\nLAYOUT.addVariant(10, struct([\n    publicKey$2(\"base\"),\n    rustStringLayout(\"seed\"),\n    publicKey$2(\"owner\"),\n]), \"assignWithSeed\");\nLAYOUT.addVariant(11, struct([\n    ns64(\"lamports\"),\n    rustStringLayout(\"seed\"),\n    publicKey$2(\"owner\"),\n]), \"transferWithSeed\");\nfunction encodeData(instruction, maxSpan) {\n    const b = Buffer.alloc(maxSpan !== null && maxSpan !== void 0 ? maxSpan : instructionMaxSpan);\n    const span = LAYOUT.encode(instruction, b);\n    if (maxSpan === undefined) {\n        return b.slice(0, span);\n    }\n    return b;\n}\nconst instructionMaxSpan = Math.max(...Object.values(LAYOUT.registry).map((r) => r.span));\n\nclass SystemAccountsCoder {\n    constructor(idl) {\n        this.idl = idl;\n    }\n    async encode(accountName, account) {\n        switch (accountName) {\n            case \"nonce\": {\n                const buffer = Buffer.alloc(NONCE_ACCOUNT_LENGTH);\n                const len = NONCE_ACCOUNT_LAYOUT.encode(account, buffer);\n                return buffer.slice(0, len);\n            }\n            default: {\n                throw new Error(`Invalid account name: ${accountName}`);\n            }\n        }\n    }\n    decode(accountName, ix) {\n        return this.decodeUnchecked(accountName, ix);\n    }\n    decodeUnchecked(accountName, ix) {\n        switch (accountName) {\n            case \"nonce\": {\n                return decodeNonceAccount(ix);\n            }\n            default: {\n                throw new Error(`Invalid account name: ${accountName}`);\n            }\n        }\n    }\n    // TODO: this won't use the appendData.\n    memcmp(accountName, _appendData) {\n        switch (accountName) {\n            case \"nonce\": {\n                return {\n                    dataSize: NONCE_ACCOUNT_LENGTH,\n                };\n            }\n            default: {\n                throw new Error(`Invalid account name: ${accountName}`);\n            }\n        }\n    }\n    size(idlAccount) {\n        var _a;\n        return (_a = accountSize(this.idl, idlAccount)) !== null && _a !== void 0 ? _a : 0;\n    }\n}\nfunction decodeNonceAccount(ix) {\n    return NONCE_ACCOUNT_LAYOUT.decode(ix);\n}\nclass WrappedLayout$1 extends Layout_2 {\n    constructor(layout, decoder, encoder, property) {\n        super(layout.span, property);\n        this.layout = layout;\n        this.decoder = decoder;\n        this.encoder = encoder;\n    }\n    decode(b, offset) {\n        return this.decoder(this.layout.decode(b, offset));\n    }\n    encode(src, b, offset) {\n        return this.layout.encode(this.encoder(src), b, offset);\n    }\n    getSpan(b, offset) {\n        return this.layout.getSpan(b, offset);\n    }\n}\nfunction publicKey$1(property) {\n    return new WrappedLayout$1(blob(32), (b) => new PublicKey(b), (key) => key.toBuffer(), property);\n}\nconst NONCE_ACCOUNT_LAYOUT = struct([\n    u32(\"version\"),\n    u32(\"state\"),\n    publicKey$1(\"authorizedPubkey\"),\n    publicKey$1(\"nonce\"),\n    struct([nu64(\"lamportsPerSignature\")], \"feeCalculator\"),\n]);\n\nclass SystemEventsCoder {\n    constructor(_idl) { }\n    decode(_log) {\n        throw new Error(\"System program does not have events\");\n    }\n}\n\nclass SystemTypesCoder {\n    constructor(_idl) { }\n    encode(_name, _type) {\n        throw new Error(\"System does not have user-defined types\");\n    }\n    decode(_name, _typeData) {\n        throw new Error(\"System does not have user-defined types\");\n    }\n}\n\n/**\n * Coder for the System program.\n */\nclass SystemCoder {\n    constructor(idl) {\n        this.instruction = new SystemInstructionCoder(idl);\n        this.accounts = new SystemAccountsCoder(idl);\n        this.events = new SystemEventsCoder(idl);\n        this.types = new SystemTypesCoder(idl);\n    }\n}\n\nfunction hash(data) {\n    return new TextDecoder().decode(sha256$1(data));\n}\n\nvar sha256 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    hash: hash\n});\n\n// Sync version of web3.PublicKey.createWithSeed.\nfunction createWithSeedSync(fromPublicKey, seed, programId) {\n    const buffer = Buffer$1.concat([\n        fromPublicKey.toBuffer(),\n        Buffer$1.from(seed),\n        programId.toBuffer(),\n    ]);\n    return new PublicKey(sha256$1(buffer));\n}\n\nvar pubkey = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    createWithSeedSync: createWithSeedSync\n});\n\nconst TOKEN_PROGRAM_ID = new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\");\nconst ASSOCIATED_PROGRAM_ID = new PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\nfunction associatedAddress({ mint, owner, }) {\n    return PublicKey.findProgramAddressSync([owner.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], ASSOCIATED_PROGRAM_ID)[0];\n}\n\nvar token = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    TOKEN_PROGRAM_ID: TOKEN_PROGRAM_ID,\n    ASSOCIATED_PROGRAM_ID: ASSOCIATED_PROGRAM_ID,\n    associatedAddress: associatedAddress\n});\n\nvar browserPonyfill = {exports: {}};\n\n(function (module, exports) {\nvar global = typeof self !== 'undefined' ? self : commonjsGlobal;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException;\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\n((function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}))({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch; // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers;\nexports.Request = ctx.Request;\nexports.Response = ctx.Response;\nmodule.exports = exports;\n}(browserPonyfill, browserPonyfill.exports));\n\nvar fetch = /*@__PURE__*/getDefaultExportFromCjs(browserPonyfill.exports);\n\n/**\n * Returns a verified build from the anchor registry. null if no such\n * verified build exists, e.g., if the program has been upgraded since the\n * last verified build.\n */\nasync function verifiedBuild(connection, programId, limit = 5) {\n    const url = `https://api.apr.dev/api/v0/program/${programId.toString()}/latest?limit=${limit}`;\n    const [programData, latestBuildsResp] = await Promise.all([\n        fetchData(connection, programId),\n        fetch(url),\n    ]);\n    // Filter out all non successful builds.\n    const latestBuilds = (await latestBuildsResp.json()).filter((b) => !b.aborted && b.state === \"Built\" && b.verified === \"Verified\");\n    if (latestBuilds.length === 0) {\n        return null;\n    }\n    // Get the latest build.\n    const build = latestBuilds[0];\n    // Has the program been upgraded since the last build?\n    if (programData.slot.toNumber() !== build.verified_slot) {\n        return null;\n    }\n    // Success.\n    return build;\n}\n/**\n * Returns the program data account for this program, containing the\n * metadata for this program, e.g., the upgrade authority.\n */\nasync function fetchData(connection, programId) {\n    const accountInfo = await connection.getAccountInfo(programId);\n    if (accountInfo === null) {\n        throw new Error(\"program account not found\");\n    }\n    const { program } = decodeUpgradeableLoaderState(accountInfo.data);\n    const programdataAccountInfo = await connection.getAccountInfo(program.programdataAddress);\n    if (programdataAccountInfo === null) {\n        throw new Error(\"program data account not found\");\n    }\n    const { programData } = decodeUpgradeableLoaderState(programdataAccountInfo.data);\n    return programData;\n}\nconst UPGRADEABLE_LOADER_STATE_LAYOUT = borsh.rustEnum([\n    borsh.struct([], \"uninitialized\"),\n    borsh.struct([borsh.option(borsh.publicKey(), \"authorityAddress\")], \"buffer\"),\n    borsh.struct([borsh.publicKey(\"programdataAddress\")], \"program\"),\n    borsh.struct([\n        borsh.u64(\"slot\"),\n        borsh.option(borsh.publicKey(), \"upgradeAuthorityAddress\"),\n    ], \"programData\"),\n], undefined, borsh.u32());\nfunction decodeUpgradeableLoaderState(data) {\n    return UPGRADEABLE_LOADER_STATE_LAYOUT.decode(data);\n}\n\nvar registry = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    verifiedBuild: verifiedBuild,\n    fetchData: fetchData,\n    decodeUpgradeableLoaderState: decodeUpgradeableLoaderState\n});\n\nvar index = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    sha256: sha256,\n    rpc: rpc,\n    publicKey: pubkey,\n    bytes: index$1,\n    token: token,\n    features: features,\n    registry: registry\n});\n\nfunction isIdlAccounts(accountItem) {\n    return \"accounts\" in accountItem;\n}\n// Deterministic IDL address as a function of the program id.\nasync function idlAddress(programId) {\n    const base = (await PublicKey.findProgramAddress([], programId))[0];\n    return await PublicKey.createWithSeed(base, seed(), programId);\n}\n// Seed for generating the idlAddress.\nfunction seed() {\n    return \"anchor:idl\";\n}\nconst IDL_ACCOUNT_LAYOUT = borsh.struct([\n    borsh.publicKey(\"authority\"),\n    borsh.vecU8(\"data\"),\n]);\nfunction decodeIdlAccount(data) {\n    return IDL_ACCOUNT_LAYOUT.decode(data);\n}\n\nfunction splitArgsAndCtx(idlIx, args) {\n    var _a, _b;\n    let options = {};\n    const inputLen = idlIx.args ? idlIx.args.length : 0;\n    if (args.length > inputLen) {\n        if (args.length !== inputLen + 1) {\n            throw new Error(`provided too many arguments ${args} to instruction ${idlIx === null || idlIx === void 0 ? void 0 : idlIx.name} expecting: ${(_b = (_a = idlIx.args) === null || _a === void 0 ? void 0 : _a.map((a) => a.name)) !== null && _b !== void 0 ? _b : []}`);\n        }\n        options = args.pop();\n    }\n    return [args, options];\n}\n\nclass InstructionNamespaceFactory {\n    static build(idlIx, encodeFn, programId) {\n        if (idlIx.name === \"_inner\") {\n            throw new IdlError(\"the _inner name is reserved\");\n        }\n        const ix = (...args) => {\n            const [ixArgs, ctx] = splitArgsAndCtx(idlIx, [...args]);\n            const { discriminator } = ctx;\n            validateAccounts(idlIx.accounts, ctx.accounts);\n            validateInstruction(idlIx, ...args);\n            const keys = ix.accounts(ctx.accounts);\n            if (ctx.remainingAccounts !== undefined) {\n                keys.push(...ctx.remainingAccounts);\n            }\n            if (isSet(\"debug-logs\")) {\n                console.log(\"Outgoing account metas:\", keys);\n            }\n            return new TransactionInstruction({\n                keys,\n                programId,\n                data: encodeFn(idlIx.name, toInstruction(idlIx, ...ixArgs), discriminator),\n            });\n        };\n        // Utility fn for ordering the accounts for this instruction.\n        ix[\"accounts\"] = (accs) => {\n            return InstructionNamespaceFactory.accountsArray(accs, idlIx.accounts, programId, idlIx.name);\n        };\n        return ix;\n    }\n    static accountsArray(ctx, accounts, programId, ixName) {\n        if (!ctx) {\n            return [];\n        }\n        return accounts\n            .map((acc) => {\n            // Nested accounts.\n            const nestedAccounts = \"accounts\" in acc ? acc.accounts : undefined;\n            if (nestedAccounts !== undefined) {\n                const rpcAccs = ctx[acc.name];\n                return InstructionNamespaceFactory.accountsArray(rpcAccs, acc.accounts, programId, ixName).flat();\n            }\n            else {\n                const account = acc;\n                let pubkey;\n                try {\n                    pubkey = translateAddress(ctx[acc.name]);\n                }\n                catch (err) {\n                    throw new Error(`Wrong input type for account \"${acc.name}\" in the instruction accounts object${ixName !== undefined ? ' for instruction \"' + ixName + '\"' : \"\"}. Expected PublicKey or string.`);\n                }\n                const optional = account.isOptional && pubkey.equals(programId);\n                const isWritable = account.isMut && !optional;\n                const isSigner = account.isSigner && !optional;\n                return {\n                    pubkey,\n                    isWritable,\n                    isSigner,\n                };\n            }\n        })\n            .flat();\n    }\n}\n// Throws error if any argument required for the `ix` is not given.\nfunction validateInstruction(ix, ...args) {\n    // todo\n}\n\nclass TransactionFactory {\n    static build(idlIx, ixFn) {\n        const txFn = (...args) => {\n            var _a, _b, _c;\n            const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n            const tx = new Transaction();\n            if (ctx.preInstructions && ctx.instructions) {\n                throw new Error(\"instructions is deprecated, use preInstructions\");\n            }\n            (_a = ctx.preInstructions) === null || _a === void 0 ? void 0 : _a.forEach((ix) => tx.add(ix));\n            (_b = ctx.instructions) === null || _b === void 0 ? void 0 : _b.forEach((ix) => tx.add(ix));\n            tx.add(ixFn(...args));\n            (_c = ctx.postInstructions) === null || _c === void 0 ? void 0 : _c.forEach((ix) => tx.add(ix));\n            return tx;\n        };\n        return txFn;\n    }\n}\n\nclass RpcFactory {\n    static build(idlIx, txFn, idlErrors, provider) {\n        const rpc = async (...args) => {\n            var _a;\n            const tx = txFn(...args);\n            const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n            if (provider.sendAndConfirm === undefined) {\n                throw new Error(\"This function requires 'Provider.sendAndConfirm' to be implemented.\");\n            }\n            try {\n                return await provider.sendAndConfirm(tx, (_a = ctx.signers) !== null && _a !== void 0 ? _a : [], ctx.options);\n            }\n            catch (err) {\n                throw translateError(err, idlErrors);\n            }\n        };\n        return rpc;\n    }\n}\n\nclass AccountFactory {\n    static build(idl, coder, programId, provider) {\n        var _a;\n        const accountFns = {};\n        (_a = idl.accounts) === null || _a === void 0 ? void 0 : _a.forEach((idlAccount) => {\n            const name = camelCase(idlAccount.name);\n            accountFns[name] = new AccountClient(idl, idlAccount, programId, provider, coder);\n        });\n        return accountFns;\n    }\n}\nclass AccountClient {\n    /**\n     * Returns the number of bytes in this account.\n     */\n    get size() {\n        return this._size;\n    }\n    /**\n     * Returns the program ID owning all accounts.\n     */\n    get programId() {\n        return this._programId;\n    }\n    /**\n     * Returns the client's wallet and network provider.\n     */\n    get provider() {\n        return this._provider;\n    }\n    /**\n     * Returns the coder.\n     */\n    get coder() {\n        return this._coder;\n    }\n    /**\n     * Returns the idl account.\n     */\n    get idlAccount() {\n        return this._idlAccount;\n    }\n    constructor(idl, idlAccount, programId, provider, coder) {\n        this._idlAccount = idlAccount;\n        this._programId = programId;\n        this._provider = provider !== null && provider !== void 0 ? provider : getProvider();\n        this._coder = coder !== null && coder !== void 0 ? coder : new BorshCoder(idl);\n        this._size = this._coder.accounts.size(idlAccount);\n    }\n    /**\n     * Returns a deserialized account, returning null if it doesn't exist.\n     *\n     * @param address The address of the account to fetch.\n     */\n    async fetchNullable(address, commitment) {\n        const { data } = await this.fetchNullableAndContext(address, commitment);\n        return data;\n    }\n    /**\n     * Returns a deserialized account along with the associated rpc response context, returning null if it doesn't exist.\n     *\n     * @param address The address of the account to fetch.\n     */\n    async fetchNullableAndContext(address, commitment) {\n        const accountInfo = await this.getAccountInfoAndContext(address, commitment);\n        const { value, context } = accountInfo;\n        return {\n            data: value && value.data.length !== 0\n                ? this._coder.accounts.decode(this._idlAccount.name, value.data)\n                : null,\n            context,\n        };\n    }\n    /**\n     * Returns a deserialized account.\n     *\n     * @param address The address of the account to fetch.\n     */\n    async fetch(address, commitment) {\n        const { data } = await this.fetchNullableAndContext(address, commitment);\n        if (data === null) {\n            throw new Error(`Account does not exist or has no data ${address.toString()}`);\n        }\n        return data;\n    }\n    /**\n     * Returns a deserialized account along with the associated rpc response context.\n     *\n     * @param address The address of the account to fetch.\n     */\n    async fetchAndContext(address, commitment) {\n        const { data, context } = await this.fetchNullableAndContext(address, commitment);\n        if (data === null) {\n            throw new Error(`Account does not exist ${address.toString()}`);\n        }\n        return { data, context };\n    }\n    /**\n     * Returns multiple deserialized accounts.\n     * Accounts not found or with wrong discriminator are returned as null.\n     *\n     * @param addresses The addresses of the accounts to fetch.\n     */\n    async fetchMultiple(addresses, commitment) {\n        const accounts = await this.fetchMultipleAndContext(addresses, commitment);\n        return accounts.map((account) => (account ? account.data : null));\n    }\n    /**\n     * Returns multiple deserialized accounts.\n     * Accounts not found or with wrong discriminator are returned as null.\n     *\n     * @param addresses The addresses of the accounts to fetch.\n     */\n    async fetchMultipleAndContext(addresses, commitment) {\n        const accounts = await getMultipleAccountsAndContext(this._provider.connection, addresses.map((address) => translateAddress(address)), commitment);\n        // Decode accounts where discriminator is correct, null otherwise\n        return accounts.map((result) => {\n            if (result == null) {\n                return null;\n            }\n            const { account, context } = result;\n            return {\n                data: this._coder.accounts.decode(this._idlAccount.name, account.data),\n                context,\n            };\n        });\n    }\n    /**\n     * Returns all instances of this account type for the program.\n     *\n     * @param filters User-provided filters to narrow the results from `connection.getProgramAccounts`.\n     *\n     *                When filters are not defined this method returns all\n     *                the account instances.\n     *\n     *                When filters are of type `Buffer`, the filters are appended\n     *                after the discriminator.\n     *\n     *                When filters are of type `GetProgramAccountsFilter[]`,\n     *                filters are appended after the discriminator filter.\n     */\n    async all(filters) {\n        const filter = this.coder.accounts.memcmp(this._idlAccount.name, filters instanceof Buffer ? filters : undefined);\n        const coderFilters = [];\n        if ((filter === null || filter === void 0 ? void 0 : filter.offset) != undefined && (filter === null || filter === void 0 ? void 0 : filter.bytes) != undefined) {\n            coderFilters.push({\n                memcmp: { offset: filter.offset, bytes: filter.bytes },\n            });\n        }\n        if ((filter === null || filter === void 0 ? void 0 : filter.dataSize) != undefined) {\n            coderFilters.push({ dataSize: filter.dataSize });\n        }\n        let resp = await this._provider.connection.getProgramAccounts(this._programId, {\n            commitment: this._provider.connection.commitment,\n            filters: [...coderFilters, ...(Array.isArray(filters) ? filters : [])],\n        });\n        return resp.map(({ pubkey, account }) => {\n            return {\n                publicKey: pubkey,\n                account: this._coder.accounts.decode(this._idlAccount.name, account.data),\n            };\n        });\n    }\n    /**\n     * Returns an `EventEmitter` emitting a \"change\" event whenever the account\n     * changes.\n     */\n    subscribe(address, commitment) {\n        const sub = subscriptions.get(address.toString());\n        if (sub) {\n            return sub.ee;\n        }\n        const ee = new EventEmitter();\n        address = translateAddress(address);\n        const listener = this._provider.connection.onAccountChange(address, (acc) => {\n            const account = this._coder.accounts.decode(this._idlAccount.name, acc.data);\n            ee.emit(\"change\", account);\n        }, commitment);\n        subscriptions.set(address.toString(), {\n            ee,\n            listener,\n        });\n        return ee;\n    }\n    /**\n     * Unsubscribes from the account at the given address.\n     */\n    async unsubscribe(address) {\n        let sub = subscriptions.get(address.toString());\n        if (!sub) {\n            console.warn(\"Address is not subscribed\");\n            return;\n        }\n        if (subscriptions) {\n            await this._provider.connection\n                .removeAccountChangeListener(sub.listener)\n                .then(() => {\n                subscriptions.delete(address.toString());\n            })\n                .catch(console.error);\n        }\n    }\n    /**\n     * Returns an instruction for creating this account.\n     */\n    async createInstruction(signer, sizeOverride) {\n        const size = this.size;\n        if (this._provider.publicKey === undefined) {\n            throw new Error(\"This function requires the Provider interface implementor to have a 'publicKey' field.\");\n        }\n        return SystemProgram.createAccount({\n            fromPubkey: this._provider.publicKey,\n            newAccountPubkey: signer.publicKey,\n            space: sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size,\n            lamports: await this._provider.connection.getMinimumBalanceForRentExemption(sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size),\n            programId: this._programId,\n        });\n    }\n    async getAccountInfo(address, commitment) {\n        return await this._provider.connection.getAccountInfo(translateAddress(address), commitment);\n    }\n    async getAccountInfoAndContext(address, commitment) {\n        return await this._provider.connection.getAccountInfoAndContext(translateAddress(address), commitment);\n    }\n}\n// Tracks all subscriptions.\nconst subscriptions = new Map();\n\nconst PROGRAM_LOG = \"Program log: \";\nconst PROGRAM_DATA = \"Program data: \";\nconst PROGRAM_LOG_START_INDEX = PROGRAM_LOG.length;\nconst PROGRAM_DATA_START_INDEX = PROGRAM_DATA.length;\nclass EventManager {\n    constructor(programId, provider, coder) {\n        this._programId = programId;\n        this._provider = provider;\n        this._eventParser = new EventParser(programId, coder);\n        this._eventCallbacks = new Map();\n        this._eventListeners = new Map();\n        this._listenerIdCount = 0;\n    }\n    addEventListener(eventName, callback) {\n        var _a;\n        let listener = this._listenerIdCount;\n        this._listenerIdCount += 1;\n        // Store the listener into the event map.\n        if (!this._eventListeners.has(eventName)) {\n            this._eventListeners.set(eventName, []);\n        }\n        this._eventListeners.set(eventName, ((_a = this._eventListeners.get(eventName)) !== null && _a !== void 0 ? _a : []).concat(listener));\n        // Store the callback into the listener map.\n        this._eventCallbacks.set(listener, [eventName, callback]);\n        // Create the subscription singleton, if needed.\n        if (this._onLogsSubscriptionId !== undefined) {\n            return listener;\n        }\n        this._onLogsSubscriptionId = this._provider.connection.onLogs(this._programId, (logs, ctx) => {\n            if (logs.err) {\n                return;\n            }\n            for (const event of this._eventParser.parseLogs(logs.logs)) {\n                const allListeners = this._eventListeners.get(event.name);\n                if (allListeners) {\n                    allListeners.forEach((listener) => {\n                        const listenerCb = this._eventCallbacks.get(listener);\n                        if (listenerCb) {\n                            const [, callback] = listenerCb;\n                            callback(event.data, ctx.slot, logs.signature);\n                        }\n                    });\n                }\n            }\n        });\n        return listener;\n    }\n    async removeEventListener(listener) {\n        // Get the callback.\n        const callback = this._eventCallbacks.get(listener);\n        if (!callback) {\n            throw new Error(`Event listener ${listener} doesn't exist!`);\n        }\n        const [eventName] = callback;\n        // Get the listeners.\n        let listeners = this._eventListeners.get(eventName);\n        if (!listeners) {\n            throw new Error(`Event listeners don't exist for ${eventName}!`);\n        }\n        // Update both maps.\n        this._eventCallbacks.delete(listener);\n        listeners = listeners.filter((l) => l !== listener);\n        this._eventListeners.set(eventName, listeners);\n        if (listeners.length === 0) {\n            this._eventListeners.delete(eventName);\n        }\n        // Kill the websocket connection if all listeners have been removed.\n        if (this._eventCallbacks.size === 0) {\n            if (this._eventListeners.size !== 0) {\n                throw new Error(`Expected event listeners size to be 0 but got ${this._eventListeners.size}`);\n            }\n            if (this._onLogsSubscriptionId !== undefined) {\n                await this._provider.connection.removeOnLogsListener(this._onLogsSubscriptionId);\n                this._onLogsSubscriptionId = undefined;\n            }\n        }\n    }\n}\nclass EventParser {\n    constructor(programId, coder) {\n        this.coder = coder;\n        this.programId = programId;\n    }\n    // Each log given, represents an array of messages emitted by\n    // a single transaction, which can execute many different programs across\n    // CPI boundaries. However, the subscription is only interested in the\n    // events emitted by *this* program. In achieving this, we keep track of the\n    // program execution context by parsing each log and looking for a CPI\n    // `invoke` call. If one exists, we know a new program is executing. So we\n    // push the programId onto a stack and switch the program context. This\n    // allows us to track, for a given log, which program was executing during\n    // its emission, thereby allowing us to know if a given log event was\n    // emitted by *this* program. If it was, then we parse the raw string and\n    // emit the event if the string matches the event being subscribed to.\n    *parseLogs(logs, errorOnDecodeFailure = false) {\n        const logScanner = new LogScanner(logs);\n        const execution = new ExecutionContext();\n        let log = logScanner.next();\n        while (log !== null) {\n            let [event, newProgram, didPop] = this.handleLog(execution, log, errorOnDecodeFailure);\n            if (event) {\n                yield event;\n            }\n            if (newProgram) {\n                execution.push(newProgram);\n            }\n            if (didPop) {\n                execution.pop();\n            }\n            log = logScanner.next();\n        }\n    }\n    // Main log handler. Returns a three element array of the event, the\n    // next program that was invoked for CPI, and a boolean indicating if\n    // a program has completed execution (and thus should be popped off the\n    // execution stack).\n    handleLog(execution, log, errorOnDecodeFailure) {\n        // Executing program is this program.\n        if (execution.stack.length > 0 &&\n            execution.program() === this.programId.toString()) {\n            return this.handleProgramLog(log, errorOnDecodeFailure);\n        }\n        // Executing program is not this program.\n        else {\n            return [null, ...this.handleSystemLog(log)];\n        }\n    }\n    // Handles logs from *this* program.\n    handleProgramLog(log, errorOnDecodeFailure) {\n        // This is a `msg!` log or a `sol_log_data` log.\n        if (log.startsWith(PROGRAM_LOG) || log.startsWith(PROGRAM_DATA)) {\n            const logStr = log.startsWith(PROGRAM_LOG)\n                ? log.slice(PROGRAM_LOG_START_INDEX)\n                : log.slice(PROGRAM_DATA_START_INDEX);\n            const event = this.coder.events.decode(logStr);\n            if (errorOnDecodeFailure && event === null) {\n                throw new Error(`Unable to decode event ${logStr}`);\n            }\n            return [event, null, false];\n        }\n        // System log.\n        else {\n            return [null, ...this.handleSystemLog(log)];\n        }\n    }\n    // Handles logs when the current program being executing is *not* this.\n    handleSystemLog(log) {\n        // System component.\n        const logStart = log.split(\":\")[0];\n        // Did the program finish executing?\n        if (logStart.match(/^Program (.*) success/g) !== null) {\n            return [null, true];\n            // Recursive call.\n        }\n        else if (logStart.startsWith(`Program ${this.programId.toString()} invoke`)) {\n            return [this.programId.toString(), false];\n        }\n        // CPI call.\n        else if (logStart.includes(\"invoke\")) {\n            return [\"cpi\", false]; // Any string will do.\n        }\n        else {\n            return [null, false];\n        }\n    }\n}\n// Stack frame execution context, allowing one to track what program is\n// executing for a given log.\nclass ExecutionContext {\n    constructor() {\n        this.stack = [];\n    }\n    program() {\n        if (!this.stack.length) {\n            throw new Error(\"Expected the stack to have elements\");\n        }\n        return this.stack[this.stack.length - 1];\n    }\n    push(newProgram) {\n        this.stack.push(newProgram);\n    }\n    pop() {\n        if (!this.stack.length) {\n            throw new Error(\"Expected the stack to have elements\");\n        }\n        this.stack.pop();\n    }\n}\nclass LogScanner {\n    constructor(logs) {\n        this.logs = logs;\n    }\n    next() {\n        if (this.logs.length === 0) {\n            return null;\n        }\n        let l = this.logs[0];\n        this.logs = this.logs.slice(1);\n        return l;\n    }\n}\n\nclass SimulateFactory {\n    static build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n        const simulate = async (...args) => {\n            var _a;\n            const tx = txFn(...args);\n            const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n            let resp = undefined;\n            if (provider.simulate === undefined) {\n                throw new Error(\"This function requires 'Provider.simulate' to be implemented.\");\n            }\n            try {\n                resp = await provider.simulate(tx, ctx.signers, (_a = ctx.options) === null || _a === void 0 ? void 0 : _a.commitment);\n            }\n            catch (err) {\n                throw translateError(err, idlErrors);\n            }\n            if (resp === undefined) {\n                throw new Error(\"Unable to simulate transaction\");\n            }\n            const logs = resp.logs;\n            if (!logs) {\n                throw new Error(\"Simulated logs not found\");\n            }\n            const events = [];\n            if (idl.events) {\n                let parser = new EventParser(programId, coder);\n                for (const event of parser.parseLogs(logs)) {\n                    events.push(event);\n                }\n            }\n            return { events, raw: logs };\n        };\n        return simulate;\n    }\n}\n\nfunction uint64(property) {\n    return new WrappedLayout(blob(8), (b) => u64.fromBuffer(b), (n) => n.toBuffer(), property);\n}\nfunction publicKey(property) {\n    return new WrappedLayout(blob(32), (b) => new PublicKey(b), (key) => key.toBuffer(), property);\n}\nfunction coption(layout, property) {\n    return new COptionLayout(layout, property);\n}\nclass WrappedLayout extends Layout_2 {\n    constructor(layout, decoder, encoder, property) {\n        super(layout.span, property);\n        this.layout = layout;\n        this.decoder = decoder;\n        this.encoder = encoder;\n    }\n    decode(b, offset) {\n        return this.decoder(this.layout.decode(b, offset));\n    }\n    encode(src, b, offset) {\n        return this.layout.encode(this.encoder(src), b, offset);\n    }\n    getSpan(b, offset) {\n        return this.layout.getSpan(b, offset);\n    }\n}\nclass COptionLayout extends Layout_2 {\n    constructor(layout, property) {\n        super(-1, property);\n        this.layout = layout;\n        this.discriminator = u32();\n    }\n    encode(src, b, offset = 0) {\n        if (src === null || src === undefined) {\n            return this.layout.span + this.discriminator.encode(0, b, offset);\n        }\n        this.discriminator.encode(1, b, offset);\n        return this.layout.encode(src, b, offset + 4) + 4;\n    }\n    decode(b, offset = 0) {\n        const discriminator = this.discriminator.decode(b, offset);\n        if (discriminator === 0) {\n            return null;\n        }\n        else if (discriminator === 1) {\n            return this.layout.decode(b, offset + 4);\n        }\n        throw new Error(\"Invalid coption \" + this.layout.property);\n    }\n    getSpan(b, offset = 0) {\n        return this.layout.getSpan(b, offset + 4) + 4;\n    }\n}\nclass u64 extends BN {\n    /**\n     * Convert to Buffer representation\n     */\n    toBuffer() {\n        const a = super.toArray().reverse();\n        const b = Buffer.from(a);\n        if (b.length === 8) {\n            return b;\n        }\n        if (b.length >= 8) {\n            throw new Error(\"u64 too large\");\n        }\n        const zeroPad = Buffer.alloc(8);\n        b.copy(zeroPad);\n        return zeroPad;\n    }\n    /**\n     * Construct a u64 from Buffer representation\n     */\n    static fromBuffer(buffer) {\n        if (buffer.length !== 8) {\n            throw new Error(`Invalid buffer length: ${buffer.length}`);\n        }\n        return new u64([...buffer]\n            .reverse()\n            .map((i) => `00${i.toString(16)}`.slice(-2))\n            .join(\"\"), 16);\n    }\n}\nconst TOKEN_ACCOUNT_LAYOUT = struct([\n    publicKey(\"mint\"),\n    publicKey(\"owner\"),\n    uint64(\"amount\"),\n    coption(publicKey(), \"delegate\"),\n    ((p) => {\n        const U = union(u8(\"discriminator\"), null, p);\n        U.addVariant(0, struct([]), \"uninitialized\");\n        U.addVariant(1, struct([]), \"initialized\");\n        U.addVariant(2, struct([]), \"frozen\");\n        return U;\n    })(\"state\"),\n    coption(uint64(), \"isNative\"),\n    uint64(\"delegatedAmount\"),\n    coption(publicKey(), \"closeAuthority\"),\n]);\nfunction decodeTokenAccount(b) {\n    return TOKEN_ACCOUNT_LAYOUT.decode(b);\n}\n\n// Populates a given accounts context with PDAs and common missing accounts.\nclass AccountsResolver {\n    constructor(_args, _accounts, _provider, _programId, _idlIx, _accountNamespace, _idlTypes, _customResolver) {\n        this._accounts = _accounts;\n        this._provider = _provider;\n        this._programId = _programId;\n        this._idlIx = _idlIx;\n        this._idlTypes = _idlTypes;\n        this._customResolver = _customResolver;\n        this._args = _args;\n        this._accountStore = new AccountStore(_provider, _accountNamespace, this._programId);\n    }\n    args(_args) {\n        this._args = _args;\n    }\n    // Note: We serially resolve PDAs one by one rather than doing them\n    //       in parallel because there can be dependencies between\n    //       addresses. That is, one PDA can be used as a seed in another.\n    async resolve() {\n        await this.resolveConst(this._idlIx.accounts);\n        this._resolveEventCpi(this._idlIx.accounts);\n        // Auto populate pdas and relations until we stop finding new accounts\n        while ((await this.resolvePdas(this._idlIx.accounts)) +\n            (await this.resolveRelations(this._idlIx.accounts)) +\n            (await this.resolveCustom()) >\n            0) { }\n    }\n    async resolveCustom() {\n        if (this._customResolver) {\n            const { accounts, resolved } = await this._customResolver({\n                args: this._args,\n                accounts: this._accounts,\n                provider: this._provider,\n                programId: this._programId,\n                idlIx: this._idlIx,\n            });\n            this._accounts = accounts;\n            return resolved;\n        }\n        return 0;\n    }\n    resolveOptionalsHelper(partialAccounts, accountItems) {\n        const nestedAccountsGeneric = {};\n        // Looping through accountItem array instead of on partialAccounts, so\n        // we only traverse array once\n        for (const accountItem of accountItems) {\n            const accountName = accountItem.name;\n            const partialAccount = partialAccounts[accountName];\n            // Skip if the account isn't included (thus would be undefined)\n            if (partialAccount === undefined)\n                continue;\n            if (isPartialAccounts(partialAccount)) {\n                // is compound accounts, recurse one level deeper\n                if (isIdlAccounts(accountItem)) {\n                    nestedAccountsGeneric[accountName] = this.resolveOptionalsHelper(partialAccount, accountItem[\"accounts\"]);\n                }\n                else {\n                    // Here we try our best to recover gracefully. If there are optionals we can't check, we will fail then.\n                    nestedAccountsGeneric[accountName] = flattenPartialAccounts(partialAccount, true);\n                }\n            }\n            else {\n                // if not compound accounts, do null/optional check and proceed\n                if (partialAccount !== null) {\n                    nestedAccountsGeneric[accountName] = translateAddress(partialAccount);\n                }\n                else if (accountItem[\"isOptional\"]) {\n                    nestedAccountsGeneric[accountName] = this._programId;\n                }\n            }\n        }\n        return nestedAccountsGeneric;\n    }\n    resolveOptionals(accounts) {\n        Object.assign(this._accounts, this.resolveOptionalsHelper(accounts, this._idlIx.accounts));\n    }\n    get(path) {\n        // Only return if pubkey\n        const ret = path.reduce((acc, subPath) => acc && acc[subPath], this._accounts);\n        if (ret && ret.toBase58) {\n            return ret;\n        }\n    }\n    set(path, value) {\n        let curr = this._accounts;\n        path.forEach((p, idx) => {\n            const isLast = idx == path.length - 1;\n            if (isLast) {\n                curr[p] = value;\n            }\n            curr[p] = curr[p] || {};\n            curr = curr[p];\n        });\n    }\n    async resolveConst(accounts, path = []) {\n        for (let k = 0; k < accounts.length; k += 1) {\n            const accountDescOrAccounts = accounts[k];\n            const subAccounts = accountDescOrAccounts.accounts;\n            if (subAccounts) {\n                await this.resolveConst(subAccounts, [\n                    ...path,\n                    camelCase(accountDescOrAccounts.name),\n                ]);\n            }\n            const accountDesc = accountDescOrAccounts;\n            const accountDescName = camelCase(accountDescOrAccounts.name);\n            // Signers default to the provider.\n            if (accountDesc.isSigner && !this.get([...path, accountDescName])) {\n                // @ts-expect-error\n                if (this._provider.wallet === undefined) {\n                    throw new Error(\"This function requires the Provider interface implementor to have a 'wallet' field.\");\n                }\n                // @ts-expect-error\n                this.set([...path, accountDescName], this._provider.wallet.publicKey);\n            }\n            // Common accounts are auto populated with magic names by convention.\n            if (Reflect.has(AccountsResolver.CONST_ACCOUNTS, accountDescName) &&\n                !this.get([...path, accountDescName])) {\n                this.set([...path, accountDescName], AccountsResolver.CONST_ACCOUNTS[accountDescName]);\n            }\n        }\n    }\n    /**\n     * Resolve event CPI accounts `eventAuthority` and `program`.\n     *\n     * Accounts will only be resolved if they are declared next to each other to\n     * reduce the chance of name collision.\n     */\n    _resolveEventCpi(accounts, path = []) {\n        for (const i in accounts) {\n            const accountDescOrAccounts = accounts[i];\n            const subAccounts = accountDescOrAccounts.accounts;\n            if (subAccounts) {\n                this._resolveEventCpi(subAccounts, [\n                    ...path,\n                    camelCase(accountDescOrAccounts.name),\n                ]);\n            }\n            // Validate next index exists\n            const nextIndex = +i + 1;\n            if (nextIndex === accounts.length)\n                return;\n            const currentName = camelCase(accounts[i].name);\n            const nextName = camelCase(accounts[nextIndex].name);\n            // Populate event CPI accounts if they exist\n            if (currentName === \"eventAuthority\" && nextName === \"program\") {\n                const currentPath = [...path, currentName];\n                const nextPath = [...path, nextName];\n                if (!this.get(currentPath)) {\n                    this.set(currentPath, PublicKey.findProgramAddressSync([Buffer.from(\"__event_authority\")], this._programId)[0]);\n                }\n                if (!this.get(nextPath)) {\n                    this.set(nextPath, this._programId);\n                }\n                return;\n            }\n        }\n    }\n    async resolvePdas(accounts, path = []) {\n        let found = 0;\n        for (let k = 0; k < accounts.length; k += 1) {\n            const accountDesc = accounts[k];\n            const subAccounts = accountDesc.accounts;\n            if (subAccounts) {\n                found += await this.resolvePdas(subAccounts, [\n                    ...path,\n                    camelCase(accountDesc.name),\n                ]);\n            }\n            const accountDescCasted = accountDesc;\n            const accountDescName = camelCase(accountDesc.name);\n            // PDA derived from IDL seeds.\n            if (accountDescCasted.pda &&\n                accountDescCasted.pda.seeds.length > 0 &&\n                !this.get([...path, accountDescName])) {\n                if (Boolean(await this.autoPopulatePda(accountDescCasted, path))) {\n                    found += 1;\n                }\n            }\n        }\n        return found;\n    }\n    async resolveRelations(accounts, path = []) {\n        let found = 0;\n        for (let k = 0; k < accounts.length; k += 1) {\n            const accountDesc = accounts[k];\n            const subAccounts = accountDesc.accounts;\n            if (subAccounts) {\n                found += await this.resolveRelations(subAccounts, [\n                    ...path,\n                    camelCase(accountDesc.name),\n                ]);\n            }\n            const relations = accountDesc.relations || [];\n            const accountDescName = camelCase(accountDesc.name);\n            const newPath = [...path, accountDescName];\n            // If we have this account and there's some missing accounts that are relations to this account, fetch them\n            const accountKey = this.get(newPath);\n            if (accountKey) {\n                const matching = relations.filter((rel) => !this.get([...path, camelCase(rel)]));\n                found += matching.length;\n                if (matching.length > 0) {\n                    const account = await this._accountStore.fetchAccount({\n                        publicKey: accountKey,\n                    });\n                    await Promise.all(matching.map(async (rel) => {\n                        const relName = camelCase(rel);\n                        this.set([...path, relName], account[relName]);\n                        return account[relName];\n                    }));\n                }\n            }\n        }\n        return found;\n    }\n    async autoPopulatePda(accountDesc, path = []) {\n        if (!accountDesc.pda || !accountDesc.pda.seeds)\n            throw new Error(\"Must have seeds\");\n        const seeds = await Promise.all(accountDesc.pda.seeds.map((seedDesc) => this.toBuffer(seedDesc, path)));\n        if (seeds.some((seed) => typeof seed == \"undefined\")) {\n            return;\n        }\n        const programId = await this.parseProgramId(accountDesc, path);\n        if (!programId) {\n            return;\n        }\n        const [pubkey] = await PublicKey.findProgramAddress(seeds, programId);\n        this.set([...path, camelCase(accountDesc.name)], pubkey);\n    }\n    async parseProgramId(accountDesc, path = []) {\n        var _a;\n        if (!((_a = accountDesc.pda) === null || _a === void 0 ? void 0 : _a.programId)) {\n            return this._programId;\n        }\n        switch (accountDesc.pda.programId.kind) {\n            case \"const\":\n                return new PublicKey(this.toBufferConst(accountDesc.pda.programId.value));\n            case \"arg\":\n                return this.argValue(accountDesc.pda.programId);\n            case \"account\":\n                return await this.accountValue(accountDesc.pda.programId, path);\n            default:\n                throw new Error(`Unexpected program seed: ${accountDesc.pda.programId}`);\n        }\n    }\n    async toBuffer(seedDesc, path = []) {\n        switch (seedDesc.kind) {\n            case \"const\":\n                return this.toBufferConst(seedDesc);\n            case \"arg\":\n                return await this.toBufferArg(seedDesc);\n            case \"account\":\n                return await this.toBufferAccount(seedDesc, path);\n            default:\n                throw new Error(`Unexpected seed: ${seedDesc}`);\n        }\n    }\n    /**\n     * Recursively get the type at some path of either a primitive or a user defined struct.\n     */\n    getType(type, path = []) {\n        if (path.length > 0 && type.defined) {\n            const subType = this._idlTypes.find((t) => t.name === type.defined);\n            if (!subType) {\n                throw new Error(`Cannot find type ${type.defined}`);\n            }\n            const structType = subType.type; // enum not supported yet\n            const field = structType.fields.find((field) => field.name === path[0]);\n            return this.getType(field.type, path.slice(1));\n        }\n        return type;\n    }\n    toBufferConst(seedDesc) {\n        return this.toBufferValue(this.getType(seedDesc.type), seedDesc.value);\n    }\n    async toBufferArg(seedDesc) {\n        const argValue = this.argValue(seedDesc);\n        if (typeof argValue === \"undefined\") {\n            return;\n        }\n        return this.toBufferValue(this.getType(seedDesc.type, (seedDesc.path || \"\").split(\".\").slice(1)), argValue);\n    }\n    argValue(seedDesc) {\n        const split = seedDesc.path.split(\".\");\n        const seedArgName = camelCase(split[0]);\n        const idlArgPosition = this._idlIx.args.findIndex((argDesc) => argDesc.name === seedArgName);\n        if (idlArgPosition === -1) {\n            throw new Error(`Unable to find argument for seed: ${seedArgName}`);\n        }\n        return split\n            .slice(1)\n            .reduce((curr, path) => (curr || {})[path], this._args[idlArgPosition]);\n    }\n    async toBufferAccount(seedDesc, path = []) {\n        const accountValue = await this.accountValue(seedDesc, path);\n        if (!accountValue) {\n            return;\n        }\n        return this.toBufferValue(seedDesc.type, accountValue);\n    }\n    async accountValue(seedDesc, path = []) {\n        const pathComponents = seedDesc.path.split(\".\");\n        const fieldName = pathComponents[0];\n        const fieldPubkey = this.get([...path, camelCase(fieldName)]);\n        if (fieldPubkey === null) {\n            throw new Error(`fieldPubkey is null`);\n        }\n        // The seed is a pubkey of the account.\n        if (pathComponents.length === 1) {\n            return fieldPubkey;\n        }\n        // The key is account data.\n        //\n        // Fetch and deserialize it.\n        const account = await this._accountStore.fetchAccount({\n            publicKey: fieldPubkey,\n            name: seedDesc.account,\n        });\n        // Dereference all fields in the path to get the field value\n        // used in the seed.\n        const fieldValue = this.parseAccountValue(account, pathComponents.slice(1));\n        return fieldValue;\n    }\n    parseAccountValue(account, path) {\n        let accountField;\n        while (path.length > 0) {\n            accountField = account[camelCase(path[0])];\n            path = path.slice(1);\n        }\n        return accountField;\n    }\n    // Converts the given idl valaue into a Buffer. The values here must be\n    // primitives. E.g. no structs.\n    //\n    // TODO: add more types here as needed.\n    toBufferValue(type, value) {\n        switch (type) {\n            case \"u8\":\n                return Buffer.from([value]);\n            case \"u16\":\n                let b = Buffer.alloc(2);\n                b.writeUInt16LE(value);\n                return b;\n            case \"u32\":\n                let buf = Buffer.alloc(4);\n                buf.writeUInt32LE(value);\n                return buf;\n            case \"u64\":\n                let bU64 = Buffer.alloc(8);\n                bU64.writeBigUInt64LE(BigInt(value));\n                return bU64;\n            case \"string\":\n                return Buffer.from(encode$2(value));\n            case \"publicKey\":\n                return value.toBuffer();\n            default:\n                if (type.array) {\n                    return Buffer.from(value);\n                }\n                throw new Error(`Unexpected seed type: ${type}`);\n        }\n    }\n}\nAccountsResolver.CONST_ACCOUNTS = {\n    associatedTokenProgram: ASSOCIATED_PROGRAM_ID,\n    rent: SYSVAR_RENT_PUBKEY,\n    systemProgram: SystemProgram.programId,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    clock: SYSVAR_CLOCK_PUBKEY,\n};\n// TODO: this should be configureable to avoid unnecessary requests.\nclass AccountStore {\n    // todo: don't use the progrma use the account namespace.\n    constructor(_provider, _accounts, _programId) {\n        this._provider = _provider;\n        this._programId = _programId;\n        this._cache = new Map();\n        this._idls = {};\n        this._idls[_programId.toBase58()] = _accounts;\n    }\n    async ensureIdl(programId) {\n        if (!this._idls[programId.toBase58()]) {\n            const idl = await Program.fetchIdl(programId, this._provider);\n            if (idl) {\n                const program = new Program(idl, programId, this._provider);\n                this._idls[programId.toBase58()] = program.account;\n            }\n        }\n        return this._idls[programId.toBase58()];\n    }\n    async fetchAccount({ publicKey, name, programId = this._programId, }) {\n        const address = publicKey.toString();\n        if (!this._cache.has(address)) {\n            if (name === \"TokenAccount\") {\n                const accountInfo = await this._provider.connection.getAccountInfo(publicKey);\n                if (accountInfo === null) {\n                    throw new Error(`invalid account info for ${address}`);\n                }\n                const data = decodeTokenAccount(accountInfo.data);\n                this._cache.set(address, data);\n            }\n            else if (name) {\n                const accounts = await this.ensureIdl(programId);\n                if (accounts) {\n                    const accountFetcher = accounts[camelCase(name)];\n                    if (accountFetcher) {\n                        const account = await accountFetcher.fetch(publicKey);\n                        this._cache.set(address, account);\n                    }\n                }\n            }\n            else {\n                const account = await this._provider.connection.getAccountInfo(publicKey);\n                if (account === null) {\n                    throw new Error(`invalid account info for ${address}`);\n                }\n                const data = account.data;\n                const accounts = await this.ensureIdl(account.owner);\n                if (accounts) {\n                    const firstAccountLayout = Object.values(accounts)[0];\n                    if (!firstAccountLayout) {\n                        throw new Error(\"No accounts for this program\");\n                    }\n                    const result = firstAccountLayout.coder.accounts.decodeAny(data);\n                    this._cache.set(address, result);\n                }\n            }\n        }\n        return this._cache.get(address);\n    }\n}\n\nclass MethodsBuilderFactory {\n    static build(provider, programId, idlIx, ixFn, txFn, rpcFn, simulateFn, viewFn, accountNamespace, idlTypes, customResolver) {\n        return (...args) => new MethodsBuilder(args, ixFn, txFn, rpcFn, simulateFn, viewFn, provider, programId, idlIx, accountNamespace, idlTypes, customResolver);\n    }\n}\nfunction isPartialAccounts(partialAccount) {\n    return (typeof partialAccount === \"object\" &&\n        partialAccount !== null &&\n        !(\"_bn\" in partialAccount) // Ensures not a pubkey\n    );\n}\nfunction flattenPartialAccounts(partialAccounts, throwOnNull) {\n    const toReturn = {};\n    for (const accountName in partialAccounts) {\n        const account = partialAccounts[accountName];\n        if (account === null) {\n            if (throwOnNull)\n                throw new Error(\"Failed to resolve optionals due to IDL type mismatch with input accounts!\");\n            continue;\n        }\n        toReturn[accountName] = isPartialAccounts(account)\n            ? flattenPartialAccounts(account, true)\n            : translateAddress(account);\n    }\n    return toReturn;\n}\nclass MethodsBuilder {\n    constructor(_args, _ixFn, _txFn, _rpcFn, _simulateFn, _viewFn, _provider, _programId, _idlIx, _accountNamespace, _idlTypes, _customResolver) {\n        this._ixFn = _ixFn;\n        this._txFn = _txFn;\n        this._rpcFn = _rpcFn;\n        this._simulateFn = _simulateFn;\n        this._viewFn = _viewFn;\n        this._programId = _programId;\n        this._accounts = {};\n        this._remainingAccounts = [];\n        this._signers = [];\n        this._preInstructions = [];\n        this._postInstructions = [];\n        this._autoResolveAccounts = true;\n        this._args = _args;\n        this._accountsResolver = new AccountsResolver(_args, this._accounts, _provider, _programId, _idlIx, _accountNamespace, _idlTypes, _customResolver);\n    }\n    args(_args) {\n        this._args = _args;\n        this._accountsResolver.args(_args);\n    }\n    async pubkeys() {\n        if (this._autoResolveAccounts) {\n            await this._accountsResolver.resolve();\n        }\n        return this._accounts;\n    }\n    interface(splInterface) {\n        if (splInterface ===\n            \"spl_transfer_hook_interface::initialize_extra_account_metas\") {\n            this._discriminator = Buffer.from([43, 34, 13, 49, 167, 88, 235, 235]);\n        }\n        else if (splInterface === \"spl_transfer_hook_interface::execute\") {\n            this._discriminator = Buffer.from([105, 37, 101, 197, 75, 251, 102, 26]);\n        }\n        else {\n            throw new Error(`Unsupported interface: ${splInterface}`);\n        }\n        return this;\n    }\n    accounts(accounts) {\n        this._autoResolveAccounts = true;\n        this._accountsResolver.resolveOptionals(accounts);\n        return this;\n    }\n    accountsStrict(accounts) {\n        this._autoResolveAccounts = false;\n        this._accountsResolver.resolveOptionals(accounts);\n        return this;\n    }\n    signers(signers) {\n        this._signers = this._signers.concat(signers);\n        return this;\n    }\n    remainingAccounts(accounts) {\n        this._remainingAccounts = this._remainingAccounts.concat(accounts);\n        return this;\n    }\n    preInstructions(ixs) {\n        this._preInstructions = this._preInstructions.concat(ixs);\n        return this;\n    }\n    postInstructions(ixs) {\n        this._postInstructions = this._postInstructions.concat(ixs);\n        return this;\n    }\n    async rpc(options) {\n        if (this._autoResolveAccounts) {\n            await this._accountsResolver.resolve();\n        }\n        // @ts-ignore\n        return this._rpcFn(...this._args, {\n            accounts: this._accounts,\n            signers: this._signers,\n            remainingAccounts: this._remainingAccounts,\n            preInstructions: this._preInstructions,\n            postInstructions: this._postInstructions,\n            options: options,\n            discriminator: this._discriminator,\n        });\n    }\n    async rpcAndKeys(options) {\n        const pubkeys = await this.pubkeys();\n        return {\n            pubkeys,\n            signature: await this.rpc(options),\n        };\n    }\n    async view(options) {\n        if (this._autoResolveAccounts) {\n            await this._accountsResolver.resolve();\n        }\n        if (!this._viewFn) {\n            throw new Error(\"Method does not support views\");\n        }\n        // @ts-ignore\n        return this._viewFn(...this._args, {\n            accounts: this._accounts,\n            signers: this._signers,\n            remainingAccounts: this._remainingAccounts,\n            preInstructions: this._preInstructions,\n            postInstructions: this._postInstructions,\n            options: options,\n        });\n    }\n    async simulate(options) {\n        if (this._autoResolveAccounts) {\n            await this._accountsResolver.resolve();\n        }\n        // @ts-ignore\n        return this._simulateFn(...this._args, {\n            accounts: this._accounts,\n            signers: this._signers,\n            remainingAccounts: this._remainingAccounts,\n            preInstructions: this._preInstructions,\n            postInstructions: this._postInstructions,\n            options: options,\n        });\n    }\n    async instruction() {\n        if (this._autoResolveAccounts) {\n            await this._accountsResolver.resolve();\n        }\n        // @ts-ignore\n        return this._ixFn(...this._args, {\n            accounts: this._accounts,\n            signers: this._signers,\n            remainingAccounts: this._remainingAccounts,\n            preInstructions: this._preInstructions,\n            postInstructions: this._postInstructions,\n            discriminator: this._discriminator,\n        });\n    }\n    /**\n     * Convenient shortcut to get instructions and pubkeys via\n     * const { pubkeys, instructions } = await prepare();\n     */\n    async prepare() {\n        return {\n            instruction: await this.instruction(),\n            pubkeys: await this.pubkeys(),\n            signers: await this._signers,\n        };\n    }\n    async transaction() {\n        if (this._autoResolveAccounts) {\n            await this._accountsResolver.resolve();\n        }\n        // @ts-ignore\n        return this._txFn(...this._args, {\n            accounts: this._accounts,\n            signers: this._signers,\n            remainingAccounts: this._remainingAccounts,\n            preInstructions: this._preInstructions,\n            postInstructions: this._postInstructions,\n            discriminator: this._discriminator,\n        });\n    }\n}\n\nclass ViewFactory {\n    static build(programId, idlIx, simulateFn, idl) {\n        const isMut = idlIx.accounts.find((a) => a.isMut);\n        const hasReturn = !!idlIx.returns;\n        if (isMut || !hasReturn)\n            return;\n        const view = async (...args) => {\n            var _a, _b;\n            let simulationResult = await simulateFn(...args);\n            const returnPrefix = `Program return: ${programId} `;\n            let returnLog = simulationResult.raw.find((l) => l.startsWith(returnPrefix));\n            if (!returnLog) {\n                throw new Error(\"View expected return log\");\n            }\n            let returnData = decode(returnLog.slice(returnPrefix.length));\n            let returnType = idlIx.returns;\n            if (!returnType) {\n                throw new Error(\"View expected return type\");\n            }\n            const coder = IdlCoder.fieldLayout({ type: returnType }, Array.from([...((_a = idl.accounts) !== null && _a !== void 0 ? _a : []), ...((_b = idl.types) !== null && _b !== void 0 ? _b : [])]));\n            return coder.decode(returnData);\n        };\n        return view;\n    }\n}\n\nclass NamespaceFactory {\n    /**\n     * Generates all namespaces for a given program.\n     */\n    static build(idl, coder, programId, provider, getCustomResolver) {\n        const rpc = {};\n        const instruction = {};\n        const transaction = {};\n        const simulate = {};\n        const methods = {};\n        const view = {};\n        const idlErrors = parseIdlErrors(idl);\n        const account = idl.accounts\n            ? AccountFactory.build(idl, coder, programId, provider)\n            : {};\n        idl.instructions.forEach((idlIx) => {\n            const ixItem = InstructionNamespaceFactory.build(idlIx, (ixName, ix, discriminator) => coder.instruction.encode(ixName, ix, discriminator), programId);\n            const txItem = TransactionFactory.build(idlIx, ixItem);\n            const rpcItem = RpcFactory.build(idlIx, txItem, idlErrors, provider);\n            const simulateItem = SimulateFactory.build(idlIx, txItem, idlErrors, provider, coder, programId, idl);\n            const viewItem = ViewFactory.build(programId, idlIx, simulateItem, idl);\n            const methodItem = MethodsBuilderFactory.build(provider, programId, idlIx, ixItem, txItem, rpcItem, simulateItem, viewItem, account, idl.types || [], getCustomResolver && getCustomResolver(idlIx));\n            const name = camelCase(idlIx.name);\n            instruction[name] = ixItem;\n            transaction[name] = txItem;\n            rpc[name] = rpcItem;\n            simulate[name] = simulateItem;\n            methods[name] = methodItem;\n            if (viewItem) {\n                view[name] = viewItem;\n            }\n        });\n        return [\n            rpc,\n            instruction,\n            transaction,\n            account,\n            simulate,\n            methods,\n            view,\n        ];\n    }\n}\n\n/**\n * ## Program\n *\n * Program provides the IDL deserialized client representation of an Anchor\n * program.\n *\n * This API is the one stop shop for all things related to communicating with\n * on-chain programs. Among other things, one can send transactions, fetch\n * deserialized accounts, decode instruction data, subscribe to account\n * changes, and listen to events.\n *\n * In addition to field accessors and methods, the object provides a set of\n * dynamically generated properties, also known as namespaces, that\n * map one-to-one to program methods and accounts. These namespaces generally\n *  can be used as follows:\n *\n * ## Usage\n *\n * ```javascript\n * program.<namespace>.<program-specific-method>\n * ```\n *\n * API specifics are namespace dependent. The examples used in the documentation\n * below will refer to the two counter examples found\n * [here](https://github.com/coral-xyz/anchor#examples).\n */\nclass Program {\n    /**\n     * Address of the program.\n     */\n    get programId() {\n        return this._programId;\n    }\n    /**\n     * IDL defining the program's interface.\n     */\n    get idl() {\n        return this._idl;\n    }\n    /**\n     * Coder for serializing requests.\n     */\n    get coder() {\n        return this._coder;\n    }\n    /**\n     * Wallet and network provider.\n     */\n    get provider() {\n        return this._provider;\n    }\n    /**\n     * @param idl       The interface definition.\n     * @param programId The on-chain address of the program.\n     * @param provider  The network and wallet context to use. If not provided\n     *                  then uses [[getProvider]].\n     * @param getCustomResolver A function that returns a custom account resolver\n     *                          for the given instruction. This is useful for resolving\n     *                          public keys of missing accounts when building instructions\n     */\n    constructor(idl, programId, provider, coder, getCustomResolver) {\n        programId = translateAddress(programId);\n        if (!provider) {\n            provider = getProvider();\n        }\n        // Fields.\n        this._idl = idl;\n        this._provider = provider;\n        this._programId = programId;\n        this._coder = coder !== null && coder !== void 0 ? coder : new BorshCoder(idl);\n        this._events = new EventManager(this._programId, provider, this._coder);\n        // Dynamic namespaces.\n        const [rpc, instruction, transaction, account, simulate, methods, views] = NamespaceFactory.build(idl, this._coder, programId, provider, getCustomResolver !== null && getCustomResolver !== void 0 ? getCustomResolver : (() => undefined));\n        this.rpc = rpc;\n        this.instruction = instruction;\n        this.transaction = transaction;\n        this.account = account;\n        this.simulate = simulate;\n        this.methods = methods;\n        this.views = views;\n    }\n    /**\n     * Generates a Program client by fetching the IDL from the network.\n     *\n     * In order to use this method, an IDL must have been previously initialized\n     * via the anchor CLI's `anchor idl init` command.\n     *\n     * @param programId The on-chain address of the program.\n     * @param provider  The network and wallet context.\n     */\n    static async at(address, provider) {\n        const programId = translateAddress(address);\n        const idl = await Program.fetchIdl(programId, provider);\n        if (!idl) {\n            throw new Error(`IDL not found for program: ${address.toString()}`);\n        }\n        return new Program(idl, programId, provider);\n    }\n    /**\n     * Fetches an idl from the blockchain.\n     *\n     * In order to use this method, an IDL must have been previously initialized\n     * via the anchor CLI's `anchor idl init` command.\n     *\n     * @param programId The on-chain address of the program.\n     * @param provider  The network and wallet context.\n     */\n    static async fetchIdl(address, provider) {\n        provider = provider !== null && provider !== void 0 ? provider : getProvider();\n        const programId = translateAddress(address);\n        const idlAddr = await idlAddress(programId);\n        const accountInfo = await provider.connection.getAccountInfo(idlAddr);\n        if (!accountInfo) {\n            return null;\n        }\n        // Chop off account discriminator.\n        let idlAccount = decodeIdlAccount(accountInfo.data.slice(8));\n        const inflatedIdl = inflate(idlAccount.data);\n        return JSON.parse(decode$2(inflatedIdl));\n    }\n    /**\n     * Invokes the given callback every time the given event is emitted.\n     *\n     * @param eventName The PascalCase name of the event, provided by the IDL.\n     * @param callback  The function to invoke whenever the event is emitted from\n     *                  program logs.\n     */\n    addEventListener(eventName, callback) {\n        return this._events.addEventListener(eventName, callback);\n    }\n    /**\n     * Unsubscribes from the given eventName.\n     */\n    async removeEventListener(listener) {\n        return await this._events.removeEventListener(listener);\n    }\n}\n\nconst SYSTEM_PROGRAM_ID = new PublicKey(\"11111111111111111111111111111111\");\nfunction program(provider) {\n    return new Program(IDL, SYSTEM_PROGRAM_ID, provider, coder());\n}\nfunction coder() {\n    return new SystemCoder(IDL);\n}\nconst IDL = {\n    version: \"0.1.0\",\n    name: \"system_program\",\n    instructions: [\n        {\n            name: \"createAccount\",\n            accounts: [\n                {\n                    name: \"from\",\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: \"to\",\n                    isMut: true,\n                    isSigner: true,\n                },\n            ],\n            args: [\n                {\n                    name: \"lamports\",\n                    type: \"u64\",\n                },\n                {\n                    name: \"space\",\n                    type: \"u64\",\n                },\n                {\n                    name: \"owner\",\n                    type: \"publicKey\",\n                },\n            ],\n        },\n        {\n            name: \"assign\",\n            accounts: [\n                {\n                    name: \"pubkey\",\n                    isMut: true,\n                    isSigner: true,\n                },\n            ],\n            args: [\n                {\n                    name: \"owner\",\n                    type: \"publicKey\",\n                },\n            ],\n        },\n        {\n            name: \"transfer\",\n            accounts: [\n                {\n                    name: \"from\",\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: \"to\",\n                    isMut: true,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: \"lamports\",\n                    type: \"u64\",\n                },\n            ],\n        },\n        {\n            name: \"createAccountWithSeed\",\n            accounts: [\n                {\n                    name: \"from\",\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: \"to\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"base\",\n                    isMut: false,\n                    isSigner: true,\n                },\n            ],\n            args: [\n                {\n                    name: \"base\",\n                    type: \"publicKey\",\n                },\n                {\n                    name: \"seed\",\n                    type: \"string\",\n                },\n                {\n                    name: \"lamports\",\n                    type: \"u64\",\n                },\n                {\n                    name: \"space\",\n                    type: \"u64\",\n                },\n                {\n                    name: \"owner\",\n                    type: \"publicKey\",\n                },\n            ],\n        },\n        {\n            name: \"advanceNonceAccount\",\n            accounts: [\n                {\n                    name: \"nonce\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"recentBlockhashes\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"authorized\",\n                    isMut: false,\n                    isSigner: true,\n                },\n            ],\n            args: [\n                {\n                    name: \"authorized\",\n                    type: \"publicKey\",\n                },\n            ],\n        },\n        {\n            name: \"withdrawNonceAccount\",\n            accounts: [\n                {\n                    name: \"nonce\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"to\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"recentBlockhashes\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"rent\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"authorized\",\n                    isMut: false,\n                    isSigner: true,\n                },\n            ],\n            args: [\n                {\n                    name: \"lamports\",\n                    type: \"u64\",\n                },\n            ],\n        },\n        {\n            name: \"initializeNonceAccount\",\n            accounts: [\n                {\n                    name: \"nonce\",\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: \"recentBlockhashes\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"rent\",\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: \"authorized\",\n                    type: \"publicKey\",\n                },\n            ],\n        },\n        {\n            name: \"authorizeNonceAccount\",\n            accounts: [\n                {\n                    name: \"nonce\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"authorized\",\n                    isMut: false,\n                    isSigner: true,\n                },\n            ],\n            args: [\n                {\n                    name: \"authorized\",\n                    type: \"publicKey\",\n                },\n            ],\n        },\n        {\n            name: \"allocate\",\n            accounts: [\n                {\n                    name: \"pubkey\",\n                    isMut: true,\n                    isSigner: true,\n                },\n            ],\n            args: [\n                {\n                    name: \"space\",\n                    type: \"u64\",\n                },\n            ],\n        },\n        {\n            name: \"allocateWithSeed\",\n            accounts: [\n                {\n                    name: \"account\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"base\",\n                    isMut: false,\n                    isSigner: true,\n                },\n            ],\n            args: [\n                {\n                    name: \"base\",\n                    type: \"publicKey\",\n                },\n                {\n                    name: \"seed\",\n                    type: \"string\",\n                },\n                {\n                    name: \"space\",\n                    type: \"u64\",\n                },\n                {\n                    name: \"owner\",\n                    type: \"publicKey\",\n                },\n            ],\n        },\n        {\n            name: \"assignWithSeed\",\n            accounts: [\n                {\n                    name: \"account\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"base\",\n                    isMut: false,\n                    isSigner: true,\n                },\n            ],\n            args: [\n                {\n                    name: \"base\",\n                    type: \"publicKey\",\n                },\n                {\n                    name: \"seed\",\n                    type: \"string\",\n                },\n                {\n                    name: \"owner\",\n                    type: \"publicKey\",\n                },\n            ],\n        },\n        {\n            name: \"transferWithSeed\",\n            accounts: [\n                {\n                    name: \"from\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"base\",\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: \"to\",\n                    isMut: true,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: \"lamports\",\n                    type: \"u64\",\n                },\n                {\n                    name: \"seed\",\n                    type: \"string\",\n                },\n                {\n                    name: \"owner\",\n                    type: \"publicKey\",\n                },\n            ],\n        },\n    ],\n    accounts: [\n        {\n            name: \"nonce\",\n            type: {\n                kind: \"struct\",\n                fields: [\n                    {\n                        name: \"version\",\n                        type: \"u32\",\n                    },\n                    {\n                        name: \"state\",\n                        type: \"u32\",\n                    },\n                    {\n                        name: \"authorizedPubkey\",\n                        type: \"publicKey\",\n                    },\n                    {\n                        name: \"nonce\",\n                        type: \"publicKey\",\n                    },\n                    {\n                        name: \"feeCalculator\",\n                        type: {\n                            defined: \"FeeCalculator\",\n                        },\n                    },\n                ],\n            },\n        },\n    ],\n    types: [\n        {\n            name: \"FeeCalculator\",\n            type: {\n                kind: \"struct\",\n                fields: [\n                    {\n                        name: \"lamportsPerSignature\",\n                        type: \"u64\",\n                    },\n                ],\n            },\n        },\n    ],\n};\n\nclass Native {\n    static system(provider) {\n        return program(provider);\n    }\n}\n\nexport { AccountClient, AnchorError, AnchorProvider, BorshAccountsCoder, BorshCoder, BorshEventCoder, BorshInstructionCoder, DISCRIMINATOR_SIZE, EventManager, EventParser, IdlError, LangErrorCode, LangErrorMessage, MethodsBuilderFactory, Native, Program, ProgramError, ProgramErrorStack, SystemCoder, eventDiscriminator, getProvider, parseIdlErrors, setProvider, splitArgsAndCtx, toInstruction, translateAddress, translateError, index as utils, validateAccounts };\n//# sourceMappingURL=index.js.map\n",null,null,null,null,null,null,null],"names":["isVersionedTransaction","tx","encode$1","data","bs58$1","encode","toString","decode","Buffer$1","from","toInstruction","idlIx","args","length","Error","ix","idx","forEach","ixArg","name","validateAccounts","ixAccounts","accounts","acc","undefined","translateAddress","address","PublicKey","StructError","TypeError","constructor","failure","failures","cached","message","rest","path","super","join","this","value","key","type","refinement","branch","Object","assign","_cached","isObject","x","print","JSON","stringify","toFailure","result","context","struct","toFailures","Symbol","iterator","r","run","options","coerce","mask","ctx","coercer","schema","Array","isArray","valid","validator","k","v","s","entries","ts","t","Map","set","Set","add","refiner","Struct","props","TYPE","assert","validate","create","is","tuples","tuple","input","done","next","shiftIterator","define","array","Element","i","slice","literal","constant","description","nullable","number","isNaN","optional","string","keys","union$1","Structs","map","find","e","unknown","S","first","push","async","getMultipleAccountsAndContext","connection","publicKeys","commitment","getMultipleAccountsAndContextCore","batches","size","apply","Math","ceil","_","index","chunks","Promise","all","batch","flat","commitmentOverride","accountInfos","getMultipleAccountsInfoAndContext","account","publicKey","jsonRpcResult","condition","createRpcResult","UnknownRpcResult","jsonrpc","id","error","code","SimulatedTransactionResponseStruct","err","logs","executable","owner","lamports","rentEpoch","unitsConsumed","slot","AnchorProvider","wallet","opts","static","preflightCommitment","url","signers","_a","_b","_c","_d","sign","feePayer","recentBlockhash","getLatestBlockhash","blockhash","signer","partialSign","rawTx","signTransaction","serialize","sendAndConfirmRawTransaction","ConfirmError","txSig","signatures","Uint8Array","signature","failedTx","getTransaction","meta","logMessages","SendTransactionError","txWithSigners","txs","kp","signedTxs","signAllTransactions","sigs","includeAccounts","simulateTransaction","transaction","_compile","signData","encodedTransaction","_serialize","config","encoding","addresses","nonProgramIds","toBase58","sigVerify","res","_rpcRequest","traceIndent","logTrace","console","SimulateError","simulationResponse","rawTransaction","sendOptions","skipPreflight","sendRawTransaction","status","confirmTransaction","getProvider","local","_FEATURES","isSet","get","IdlError","ProgramErrorStack","stack","programKeyRegex","successRegex","programStack","exec","pop","programKey","AnchorError","errorCode","errorMessage","errorLogs","origin","comparedValues","replace","_programErrorStack","parse","anchorErrorLogIndex","findIndex","log","startsWith","anchorErrorLog","pubkeyRegex","leftPubkey","rightPubkey","valueRegex","leftValue","rightValue","noInfoAnchorErrorLog","fileLineAnchorErrorLog","accountNameAnchorErrorLog","errorCodeString","errorNumber","parseInt","file","line","fileLine","accountName","program","programErrorStack","ProgramError","msg","idlErrors","errString","unparsedErrorCode","includes","components","split","matches","match","parseErr","errorMsg","LangErrorMessage","translateError","anchorError","programError","handler","target","prop","Reflect","arguments","Proxy","__assign$1","n","p","prototype","hasOwnProperty","call","__assign","lowerCase","str","toLowerCase","DEFAULT_SPLIT_REGEXP","DEFAULT_STRIP_REGEXP","re","RegExp","reduce","dotCase","splitRegexp","stripRegexp","transform","delimiter","start","end","charAt","noCase","IdlCoder","field","types","fieldName","camelCase","borsh","bool","u8","i8","u16","i16","u32","i32","f32","u64","i64","f64","u128","i128","u256","i256","vecU8","vec","fieldLayout","option","defined","filtered","filter","typeDefLayout","arrayTy","arrayLen","innerLayout","typeDef","kind","fieldLayouts","fields","variants","variant","f","rustEnum","replicate","SIGHASH_GLOBAL_NAMESPACE","BorshInstructionCoder","idl","ixLayout","parseIxLayout","sighashLayouts","instructions","sh","sighash","layout","ixName","discriminator","_encode","buffer","alloc","methodName","len","concat","ixLayouts","arg","sighashKey","decoder","format","accountMetas","InstructionFormatter","idlField","formatIdlType","formatIdlData","flatIdlAccounts","flattenIdlAccounts","idlType","d","formatIdlDataDefined","enumType","enumVariant","namedFields","fieldData","variantName","pascalCase","prefix","accName","toUpperCase","sentenceCase","newPrefix","nameSpace","preimage","sha256$1","accountSize","idlAccount","typeSize","variantSizes","max","ty","coption","arraySize","Buffer","BorshAccountsCoder","accountLayouts","layouts","accountData","accountDiscriminator","compare","decodeUnchecked","decodeAny","accountDescriminator","equals","subarray","memcmp","appendData","offset","bytes","preserveConsecutiveUppercase","BorshEventCoder","events","event","eventTypeDef","discriminators","logArr","disc","eventName","BorshTypesCoder","typeLayouts","typeName","typeData","BorshCoder","instruction","commonjsGlobal","globalThis","window","global","self","Layout","span","property","Number","isInteger","makeDestinationObject","b","src","getSpan","RangeError","rv","fromArray","values","Layout_2","ExternalLayout","isCount","OffsetLayout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","V2E32","pow","divmodInt64","hi32","floor","lo32","roundedInt64","NearUInt64","readUInt32LE","writeUInt32LE","NearInt64","readInt32LE","writeInt32LE","Structure","decodePrefixes","fd","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","upv","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","addVariant","VariantLayout","vb","isBuffer","union","Blob$1","lo","write","ns64","blob","RustStringLayout","chars","BN","toNumber","rustStringLayout","publicKey$2","LAYOUT","WrappedLayout$1","encoder","publicKey$1","toBuffer","TOKEN_PROGRAM_ID","ASSOCIATED_PROGRAM_ID","browserPonyfill","exports","isIdlAccounts","accountItem","module","__self__","F","fetch","DOMException","support","Blob","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","indexOf","normalizeName","String","test","normalizeValue","iteratorFor","items","Headers","headers","append","header","getOwnPropertyNames","consumed","body","bodyUsed","reject","fileReaderReady","reader","resolve","onload","onerror","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","bufferClone","buf","view","byteLength","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","_bodyArrayBuffer","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","fromCharCode","readArrayBufferAsText","formData","json","oldValue","has","callback","thisArg","methods","Request","method","upcased","credentials","mode","signal","referrer","form","trim","decodeURIComponent","Response","bodyInit","ok","statusText","clone","response","redirectStatuses","redirect","location","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","rawHeaders","getAllResponseHeaders","parts","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","defineProperty","ponyfill","default","IDL_ACCOUNT_LAYOUT","splitArgsAndCtx","inputLen","a","InstructionNamespaceFactory","encodeFn","programId","ixArgs","remainingAccounts","TransactionInstruction","accs","accountsArray","rpcAccs","pubkey","isOptional","isWritable","isMut","isSigner","TransactionFactory","ixFn","Transaction","preInstructions","postInstructions","RpcFactory","txFn","provider","sendAndConfirm","AccountFactory","coder","accountFns","AccountClient","_size","_programId","_provider","_coder","_idlAccount","fetchNullableAndContext","accountInfo","getAccountInfoAndContext","fetchMultipleAndContext","filters","coderFilters","dataSize","getProgramAccounts","subscribe","sub","subscriptions","ee","EventEmitter","listener","onAccountChange","emit","removeAccountChangeListener","delete","catch","warn","sizeOverride","SystemProgram","createAccount","fromPubkey","newAccountPubkey","space","getMinimumBalanceForRentExemption","getAccountInfo","PROGRAM_LOG","PROGRAM_DATA","PROGRAM_LOG_START_INDEX","PROGRAM_DATA_START_INDEX","EventManager","_eventParser","EventParser","_eventCallbacks","_eventListeners","_listenerIdCount","_onLogsSubscriptionId","onLogs","parseLogs","allListeners","listenerCb","listeners","l","removeOnLogsListener","errorOnDecodeFailure","logScanner","LogScanner","execution","ExecutionContext","newProgram","didPop","handleLog","handleProgramLog","handleSystemLog","logStr","logStart","SimulateFactory","resp","simulate","parser","raw","uint64","WrappedLayout","fromBuffer","COptionLayout","toArray","reverse","zeroPad","copy","TOKEN_ACCOUNT_LAYOUT","U","AccountsResolver","_args","_accounts","_idlIx","_accountNamespace","_idlTypes","_customResolver","_accountStore","AccountStore","resolveConst","_resolveEventCpi","resolvePdas","resolveRelations","resolveCustom","resolved","resolveOptionalsHelper","partialAccounts","accountItems","nestedAccountsGeneric","partialAccount","isPartialAccounts","flattenPartialAccounts","resolveOptionals","ret","subPath","curr","accountDescOrAccounts","subAccounts","accountDesc","accountDescName","CONST_ACCOUNTS","nextIndex","currentName","nextName","currentPath","nextPath","findProgramAddressSync","found","accountDescCasted","pda","seeds","Boolean","autoPopulatePda","relations","newPath","accountKey","matching","rel","fetchAccount","relName","seedDesc","some","seed","parseProgramId","findProgramAddress","toBufferConst","argValue","accountValue","toBufferArg","toBufferAccount","getType","subType","toBufferValue","seedArgName","idlArgPosition","argDesc","pathComponents","fieldPubkey","parseAccountValue","accountField","writeUInt16LE","bU64","writeBigUInt64LE","BigInt","TextEncoder","associatedTokenProgram","rent","SYSVAR_RENT_PUBKEY","systemProgram","tokenProgram","clock","SYSVAR_CLOCK_PUBKEY","_cache","_idls","Program","fetchIdl","ensureIdl","accountFetcher","firstAccountLayout","MethodsBuilderFactory","rpcFn","simulateFn","viewFn","accountNamespace","idlTypes","customResolver","MethodsBuilder","throwOnNull","toReturn","_ixFn","_txFn","_rpcFn","_simulateFn","_viewFn","_remainingAccounts","_signers","_preInstructions","_postInstructions","_autoResolveAccounts","_accountsResolver","interface","splInterface","_discriminator","accountsStrict","ixs","pubkeys","rpc","ViewFactory","hasReturn","returns","simulationResult","returnPrefix","returnLog","returnData","returnType","NamespaceFactory","getCustomResolver","errors","parseIdlErrors","build","ixItem","txItem","rpcItem","simulateItem","viewItem","methodItem","_idl","_events","views","idlAddr","base","createWithSeed","idlAddress","inflatedIdl","inflate","TextDecoder","decode$2","SplMemoAccountsCoder","_appendData","SplMemoEventsCoder","_log","SplMemoInstructionCoder","memo","encodeAddMemo","encodeState","_ixName","_ix","SplMemoStateCoder","_name","_account","SplMemoTypesCoder","_type","_typeData","SplMemoCoder","state","SPL_MEMO_PROGRAM_ID","splMemoProgram","params","IDL","version"],"mappings":"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"}